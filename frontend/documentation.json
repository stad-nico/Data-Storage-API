{
    "pipes": [],
    "interfaces": [
        {
            "name": "ContentListStateModel",
            "id": "interface-ContentListStateModel-5568bb9b1df6dccad2761172dca88262a322fd06cea2532e1649757d362af1ed84b254948eda8965df98b691ec7d6f7ee0b05d0296424c14b1ef1dddb104f1fa",
            "file": "src/app/features/content-list/state/content-list.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpStatusCode } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Navigate } from '@ngxs/router-plugin';\r\nimport { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { append, patch, removeItem, updateItem } from '@ngxs/store/operators';\r\nimport { DirectoryService, FileService } from 'generated';\r\nimport { filter, switchMap, tap } from 'rxjs';\r\nimport { ContentType, Directory, File, Type } from 'src/app/features/content-list/components/pure-content-list/pure-content-list.component';\r\nimport { ContentListActions } from 'src/app/features/content-list/state/content-list.actions';\r\nimport { DirectoryTreeActions } from 'src/app/features/directory-tree/state/directory-tree.actions';\r\n\r\nexport interface ContentListStateModel {\r\n\titems: ContentType[];\r\n\tlastInteractedId: number | undefined;\r\n\tisInCreateMode: boolean;\r\n}\r\n\r\n@State<ContentListStateModel>({\r\n\tname: 'content_list',\r\n\tdefaults: {\r\n\t\tlastInteractedId: undefined,\r\n\t\tisInCreateMode: false,\r\n\t\titems: [],\r\n\t},\r\n})\r\n@Injectable()\r\nexport class ContentListState {\r\n\tprivate directoryService: DirectoryService;\r\n\r\n\tprivate fileService: FileService;\r\n\r\n\tconstructor(directoryService: DirectoryService, fileService: FileService) {\r\n\t\tthis.directoryService = directoryService;\r\n\t\tthis.fileService = fileService;\r\n\t}\r\n\r\n\t@Selector()\r\n\tpublic static selectContent(state: ContentListStateModel) {\r\n\t\treturn state.items;\r\n\t}\r\n\r\n\t@Selector()\r\n\tpublic static selectIsInCreateMode(state: ContentListStateModel) {\r\n\t\treturn state.isInCreateMode;\r\n\t}\r\n\r\n\t@Selector()\r\n\tpublic static isAtLeastOneSelected(state: ContentListStateModel) {\r\n\t\treturn state.items.some((item) => item.isSelected);\r\n\t}\r\n\r\n\t@Action(ContentListActions.CancelCreation)\r\n\tpublic cancelCreation(ctx: StateContext<ContentListStateModel>) {\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\tisInCreateMode: false,\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(ContentListActions.DisplayDirectoryCreationWidget)\r\n\tpublic displayDirectoryCreationWidget(ctx: StateContext<ContentListStateModel>) {\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\tisInCreateMode: true,\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(ContentListActions.CreateDirectory)\r\n\tpublic createDirectory(ctx: StateContext<ContentListStateModel>, action: ContentListActions.CreateDirectory) {\r\n\t\tconst path = decodeURI('/' + action.route.snapshot.url.join('/') + '/' + action.name + '/');\r\n\r\n\t\treturn this.directoryService.createDirectory(path, 'response').pipe(\r\n\t\t\tfilter((response) => response.status === HttpStatusCode.Created),\r\n\t\t\tswitchMap(() => this.directoryService.getDirectoryMetadata(path)),\r\n\t\t\ttap((metadata) => {\r\n\t\t\t\tctx.setState(\r\n\t\t\t\t\tpatch({\r\n\t\t\t\t\t\titems: append([\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t...metadata,\r\n\t\t\t\t\t\t\t\tisSelected: false,\r\n\t\t\t\t\t\t\t\tisHighlighted: true,\r\n\t\t\t\t\t\t\t\tisBeingProcessed: false,\r\n\t\t\t\t\t\t\t\tid: ctx.getState().items.length,\r\n\t\t\t\t\t\t\t\ttype: Type.Directory,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t]),\r\n\t\t\t\t\t\tisInCreateMode: false,\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(ContentListActions.Delete)\r\n\tpublic delete(ctx: StateContext<ContentListStateModel>, action: ContentListActions.Delete) {\r\n\t\tconst name = ctx.getState().items.find((item) => item.id === action.id)?.name;\r\n\r\n\t\tif (!name) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\titems: updateItem((item) => item.id === action.id, patch({ isBeingProcessed: true })),\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tconst path = decodeURI('/' + action.route.snapshot.url.join('/') + '/' + name + '/');\r\n\r\n\t\treturn this.directoryService.deleteDirectory(path, 'response').pipe(\r\n\t\t\ttap((response) => {\r\n\t\t\t\tif (response.status === HttpStatusCode.NoContent) {\r\n\t\t\t\t\tctx.setState(\r\n\t\t\t\t\t\tpatch({\r\n\t\t\t\t\t\t\titems: removeItem((item) => item.id === action.id),\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tctx.dispatch(new DirectoryTreeActions.Remove(path));\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t// @Action(ContentListActions.DeleteSelected)\r\n\t// public deleteSelected(ctx: StateContext<ContentListStateModel>, action: ContentListActions.DeleteSelected) {\r\n\t// \tconst selected = ctx.getState().items.filter((item) => item.isSelected);\r\n\r\n\t// \tctx.setState(\r\n\t// \t\tpatch({\r\n\t// \t\t\titems: updateItem((item) => selected.map((item) => item.id).includes(item.id), patch({ isBeingLoaded: true })),\r\n\t// \t\t})\r\n\t// \t);\r\n\r\n\t// \tconst observables = selected.map((item) => {\r\n\t// \t\tconst path = decodeURI(action.route.snapshot.url.join('/') + '/' + item.name);\r\n\t// \t\tif (item.type === Type.Directory) {\r\n\t// \t\t\treturn { id: item.id, path: path, observable: this.directoryService.deleteDirectory(path, 'response') };\r\n\t// \t\t} else {\r\n\t// \t\t\treturn { id: item.id, path: path, observable: this.fileService.deleteFile(path, 'response') };\r\n\t// \t\t}\r\n\t// \t});\r\n\r\n\t// \treturn forkJoin(\r\n\t// \t\tobservables.map((item) =>\r\n\t// \t\t\titem.observable.pipe(\r\n\t// \t\t\t\tmap((response) => ({\r\n\t// \t\t\t\t\tid: item.id,\r\n\t// \t\t\t\t\tpath: item.path,\r\n\t// \t\t\t\t\tresponse,\r\n\t// \t\t\t\t}))\r\n\t// \t\t\t)\r\n\t// \t\t)\r\n\t// \t).pipe(\r\n\t// \t\tdelay(5000),\r\n\t// \t\ttap((results) => {\r\n\t// \t\t\tfor (const result of results) {\r\n\t// \t\t\t\tif (result.response.status === HttpStatusCode.NoContent) {\r\n\t// \t\t\t\t\tctx.setState(\r\n\t// \t\t\t\t\t\tpatch({\r\n\t// \t\t\t\t\t\t\titems: removeItem((item) => item.id === result.id),\r\n\t// \t\t\t\t\t\t})\r\n\t// \t\t\t\t\t);\r\n\r\n\t// \t\t\t\t\tctx.dispatch(new DirectoryTreeActions.Remove(result.path));\r\n\t// \t\t\t\t}\r\n\t// \t\t\t}\r\n\t// \t\t})\r\n\t// \t);\r\n\t// }\r\n\r\n\t@Action(ContentListActions.FetchContent)\r\n\tpublic fetchContent(ctx: StateContext<ContentListStateModel>, action: ContentListActions.FetchContent) {\r\n\t\treturn this.directoryService.getDirectoryContent(action.path).pipe(\r\n\t\t\ttap((content) => {\r\n\t\t\t\tctx.setState(\r\n\t\t\t\t\tpatch({\r\n\t\t\t\t\t\titems: [\r\n\t\t\t\t\t\t\t...(content.directories.map((directory) => ({ isSelected: false, type: Type.Directory, ...directory })) as Omit<Directory, 'id'>[]),\r\n\t\t\t\t\t\t\t...(content.files.map((file) => ({ isSelected: false, type: Type.File, ...file })) as Omit<File, 'id'>[]),\r\n\t\t\t\t\t\t].map((element, index) => ({ id: index, ...element })),\r\n\t\t\t\t\t\tlastInteractedId: undefined,\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(ContentListActions.Open)\r\n\tpublic open(ctx: StateContext<ContentListStateModel>, action: ContentListActions.Open) {\r\n\t\tconst name = ctx.getState().items.find((item) => item.id === action.id)?.name;\r\n\r\n\t\tif (!name) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tctx.dispatch(new Navigate([name], {}, { relativeTo: action.route }));\r\n\t}\r\n\r\n\t@Action(ContentListActions.SelectSingle)\r\n\tpublic selectItem(ctx: StateContext<ContentListStateModel>, action: ContentListActions.SelectSingle) {\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\titems: updateItem((item) => item.id === action.id, patch({ isSelected: true })),\r\n\t\t\t\tlastInteractedId: action.id,\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(ContentListActions.UnselectSingle)\r\n\tpublic unselectItem(ctx: StateContext<ContentListStateModel>, action: ContentListActions.UnselectSingle) {\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\titems: updateItem((item) => item.id === action.id, patch({ isSelected: false })),\r\n\t\t\t\tlastInteractedId: action.id,\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action([ContentListActions.ShiftSelect, ContentListActions.CtrlSelect])\r\n\tpublic rangeSelect(ctx: StateContext<ContentListStateModel>, action: ContentListActions.ShiftSelect | ContentListActions.CtrlSelect) {\r\n\t\tconst lastInteractedId = ctx.getState().lastInteractedId;\r\n\r\n\t\tif (lastInteractedId === undefined) {\r\n\t\t\tctx.dispatch(new ContentListActions.SelectSingle(action.id));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst start = Math.min(lastInteractedId, action.id);\r\n\t\tconst end = Math.max(lastInteractedId, action.id);\r\n\r\n\t\tif (end - start <= 2 || this.isUnselectedInRange(ctx, start, end)) {\r\n\t\t\tthis.selectRange(ctx, start, end);\r\n\t\t} else {\r\n\t\t\tthis.unselectRange(ctx, start, end);\r\n\t\t}\r\n\t}\r\n\r\n\t@Action([ContentListActions.ShiftUnselect, ContentListActions.CtrlUnselect])\r\n\tpublic rangeUnselect(ctx: StateContext<ContentListStateModel>, action: ContentListActions.ShiftUnselect | ContentListActions.CtrlUnselect) {\r\n\t\tconst lastInteractedId = ctx.getState().lastInteractedId;\r\n\r\n\t\tif (lastInteractedId === undefined) {\r\n\t\t\tctx.dispatch(new ContentListActions.SelectSingle(action.id));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst start = Math.min(lastInteractedId, action.id);\r\n\t\tconst end = Math.max(lastInteractedId, action.id);\r\n\r\n\t\tif (this.isUnselectedInRange(ctx, start, end)) {\r\n\t\t\tthis.selectRange(ctx, start, end);\r\n\t\t} else {\r\n\t\t\tthis.unselectRange(ctx, start === action.id ? start + 1 : start, end);\r\n\t\t}\r\n\r\n\t\tctx.dispatch(new ContentListActions.SelectSingle(action.id));\r\n\t}\r\n\r\n\t@Action(ContentListActions.SelectAll)\r\n\tpublic selectAll(ctx: StateContext<ContentListStateModel>) {\r\n\t\tconst items = ctx.getState().items;\r\n\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\titems: items.map((item) => ({ ...item, isSelected: true })),\r\n\t\t\t\tlastInteractedId: items.at(-1)?.id,\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(ContentListActions.UnselectAll)\r\n\tpublic unselectAll(ctx: StateContext<ContentListStateModel>) {\r\n\t\tconst items = ctx.getState().items;\r\n\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\titems: items.map((item) => ({ ...item, isSelected: false })),\r\n\t\t\t\tlastInteractedId: items.at(0)?.id,\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\tprivate selectRange(ctx: StateContext<ContentListStateModel>, start: number, end: number) {\r\n\t\tfor (let i = start; i <= end; i++) {\r\n\t\t\tctx.dispatch(new ContentListActions.SelectSingle(i));\r\n\t\t}\r\n\t}\r\n\r\n\tprivate unselectRange(ctx: StateContext<ContentListStateModel>, start: number, end: number) {\r\n\t\tfor (let i = start; i <= end; i++) {\r\n\t\t\tctx.dispatch(new ContentListActions.UnselectSingle(i));\r\n\t\t}\r\n\t}\r\n\r\n\tprivate isUnselectedInRange(ctx: StateContext<ContentListStateModel>, from: number, to: number): boolean {\r\n\t\tif (from > to) {\r\n\t\t\t[from, to] = [to, from];\r\n\t\t}\r\n\r\n\t\treturn ctx.getState().items.find((item) => item.id >= from && item.id <= to && !item.isSelected) !== undefined;\r\n\t}\r\n}\r\n",
            "properties": [
                {
                    "name": "isInCreateMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContentType[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "lastInteractedId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DirectoryTreeStateModel",
            "id": "interface-DirectoryTreeStateModel-579d501bf1af29410771559eade02a369f83a8c5f12c942503b846bec35e3e324ccbaa06237292a5aa399efe95c03621a0a40b7d0f8dd00b076a0fa85a941587",
            "file": "src/app/features/directory-tree/state/directory-tree.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Navigate } from '@ngxs/router-plugin';\r\nimport { Action, State, StateContext } from '@ngxs/store';\r\nimport { iif, patch, removeItem, updateItem } from '@ngxs/store/operators';\r\nimport { DirectoryService } from 'generated';\r\nimport { forkJoin, map, mergeMap, tap } from 'rxjs';\r\nimport { DirectoryTreeActions } from 'src/app/features/directory-tree/state/directory-tree.actions';\r\nimport { PathUtils } from 'src/app/utils/PathUtils';\r\n\r\nexport const DirectoryTreeStateToken = 'directory_tree';\r\n\r\nexport interface DirectoryTreeStateModel {\r\n\tlastSelectedPath: string | undefined;\r\n\troot: Node;\r\n\ttree: TreeModel;\r\n}\r\n\r\nexport interface TreeModel {\r\n\t[path: string]: Array<Node>;\r\n}\r\n\r\nexport interface Node {\r\n\tid: number;\r\n\tname: string;\r\n\tpath: string;\r\n\tisCollapsed: boolean;\r\n\thasChildren: boolean;\r\n\tisSelected: boolean;\r\n}\r\n\r\n@State<DirectoryTreeStateModel>({\r\n\tname: DirectoryTreeStateToken,\r\n\tdefaults: {\r\n\t\tlastSelectedPath: undefined,\r\n\t\ttree: {},\r\n\t\troot: {\r\n\t\t\tid: 0,\r\n\t\t\tname: 'root',\r\n\t\t\tpath: '/root/',\r\n\t\t\tisCollapsed: false,\r\n\t\t\tisSelected: false,\r\n\t\t\thasChildren: true,\r\n\t\t},\r\n\t},\r\n})\r\n@Injectable()\r\nexport class DirectoryTreeState {\r\n\tprivate directoryService: DirectoryService;\r\n\r\n\tprivate id: number = 0;\r\n\r\n\tconstructor(directoryService: DirectoryService) {\r\n\t\tthis.directoryService = directoryService;\r\n\t}\r\n\r\n\t@Action(DirectoryTreeActions.FetchContent)\r\n\tpublic fetchContent(ctx: StateContext<DirectoryTreeStateModel>, action: DirectoryTreeActions.FetchContent) {\r\n\t\tif (PathUtils.ensureSlashes(action.path) in ctx.getState().tree) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\treturn this.directoryService.getDirectoryContent(action.path).pipe(\r\n\t\t\tmergeMap((content) => {\r\n\t\t\t\tconst observables = content.directories.map((directory) =>\r\n\t\t\t\t\tthis.directoryService.getDirectoryMetadata((action.path.endsWith('/') ? action.path : action.path + '/') + directory.name).pipe(\r\n\t\t\t\t\t\tmap((metadata) => ({\r\n\t\t\t\t\t\t\tid: ++this.id,\r\n\t\t\t\t\t\t\tname: metadata.name,\r\n\t\t\t\t\t\t\tpath: metadata.path,\r\n\t\t\t\t\t\t\tisCollapsed: true,\r\n\t\t\t\t\t\t\tisSelected: false,\r\n\t\t\t\t\t\t\thasChildren: metadata.directories > 0,\r\n\t\t\t\t\t\t}))\r\n\t\t\t\t\t)\r\n\t\t\t\t);\r\n\r\n\t\t\t\treturn forkJoin(observables);\r\n\t\t\t}),\r\n\t\t\ttap((children) => {\r\n\t\t\t\tconst tree = ctx.getState().tree;\r\n\r\n\t\t\t\tctx.setState(\r\n\t\t\t\t\tpatch({\r\n\t\t\t\t\t\ttree: {\r\n\t\t\t\t\t\t\t...tree,\r\n\t\t\t\t\t\t\t[PathUtils.ensureSlashes(action.path)]: children,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(DirectoryTreeActions.Remove)\r\n\tpublic remove(ctx: StateContext<DirectoryTreeStateModel>, action: DirectoryTreeActions.Remove) {\r\n\t\tconst { name, dir: parentPath } = PathUtils.parse(action.path);\r\n\t\tconst { name: parentName, dir: grandparentPath } = PathUtils.parse(parentPath);\r\n\r\n\t\tconst parentTree = ctx.getState().tree[parentPath];\r\n\t\tconst treeItem = parentTree?.find((item) => item.name === name);\r\n\r\n\t\tif (!treeItem) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\ttree: iif(\r\n\t\t\t\t\t!!ctx.getState().tree[grandparentPath],\r\n\t\t\t\t\tpatch({\r\n\t\t\t\t\t\t[grandparentPath]: updateItem(\r\n\t\t\t\t\t\t\t(item) => item.name === parentName,\r\n\t\t\t\t\t\t\tpatch({ hasChildren: parentTree.length - 1 > 0, isCollapsed: parentTree.length - 1 > 0 })\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\t[parentPath]: removeItem((item) => item.name === name),\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tpatch({\r\n\t\t\t\t\t\t[parentPath]: removeItem((item) => item.name === name),\r\n\t\t\t\t\t})\r\n\t\t\t\t),\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(DirectoryTreeActions.Collapse)\r\n\tpublic collapse(ctx: StateContext<DirectoryTreeStateModel>, action: DirectoryTreeActions.Collapse) {\r\n\t\tconst { name, dir: parent } = PathUtils.parse(action.path);\r\n\r\n\t\tconst parentTree = ctx.getState().tree[parent];\r\n\t\tconst treeItem = parentTree?.find((item) => item.name === name);\r\n\r\n\t\tif (!treeItem || treeItem.isCollapsed) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\ttree: patch({\r\n\t\t\t\t\t[parent]: updateItem((item) => item.name === name, patch({ isCollapsed: true })),\r\n\t\t\t\t}),\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(DirectoryTreeActions.Expand)\r\n\tpublic expand(ctx: StateContext<DirectoryTreeStateModel>, action: DirectoryTreeActions.Expand) {\r\n\t\tconst { name, dir: parent } = PathUtils.parse(action.path);\r\n\r\n\t\tconst parentTree = ctx.getState().tree[parent];\r\n\t\tconst treeItem = parentTree?.find((item) => item.name === name);\r\n\r\n\t\tif (!treeItem || !treeItem.isCollapsed) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\ttree: patch({\r\n\t\t\t\t\t[parent]: updateItem((item) => item.name === name, patch({ isCollapsed: false })),\r\n\t\t\t\t}),\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(DirectoryTreeActions.Open)\r\n\tpublic open(ctx: StateContext<DirectoryTreeStateModel>, action: DirectoryTreeActions.Open) {\r\n\t\tctx.dispatch(new Navigate(['tree', ...action.path.split('/').filter((part) => part !== '')]));\r\n\t}\r\n\r\n\t@Action(DirectoryTreeActions.Select)\r\n\tpublic select(ctx: StateContext<DirectoryTreeStateModel>, action: DirectoryTreeActions.Select) {\r\n\t\tconst lastSelectedPath = ctx.getState().lastSelectedPath;\r\n\r\n\t\tif (lastSelectedPath) {\r\n\t\t\tctx.dispatch(new DirectoryTreeActions.Unselect(lastSelectedPath));\r\n\t\t}\r\n\r\n\t\tconst { name, dir: parent } = PathUtils.parse(action.path);\r\n\r\n\t\tconst parentTree = ctx.getState().tree[parent];\r\n\t\tconst treeItem = parentTree?.find((item) => item.name === name);\r\n\r\n\t\tif (!treeItem || treeItem.isSelected) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\tlastSelectedPath: action.path,\r\n\t\t\t\ttree: patch({\r\n\t\t\t\t\t[parent]: updateItem((item) => item.name === name, patch({ isSelected: true, isCollapsed: !treeItem.hasChildren })),\r\n\t\t\t\t}),\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(DirectoryTreeActions.Unselect)\r\n\tpublic unselect(ctx: StateContext<DirectoryTreeStateModel>, action: DirectoryTreeActions.Unselect) {\r\n\t\tconst { name, dir: parent } = PathUtils.parse(action.path);\r\n\r\n\t\tconst parentTree = ctx.getState().tree[parent];\r\n\t\tconst treeItem = parentTree?.find((item) => item.name === name);\r\n\r\n\t\tif (!treeItem || !treeItem.isSelected) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\ttree: patch({\r\n\t\t\t\t\t[parent]: updateItem((item) => item.name === name, patch({ isSelected: false })),\r\n\t\t\t\t}),\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n}\r\n",
            "properties": [
                {
                    "name": "lastSelectedPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "root",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Node",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "tree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TreeModel",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDeletable",
            "id": "interface-IDeletable-3bc82e5bb7a098c58bfb3c2da11d09c55587e42d8486dbbdfb83a7354ce13ce9c6f1cd93b258daf3d0c26ec2beba73f2195af5fe99a6b0adb6238b176876f52b",
            "file": "src/app/shared/models/IDeletable.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IDeletable {\r\n\tdelete(): void;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "delete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": []
        },
        {
            "name": "IDownloadable",
            "id": "interface-IDownloadable-14f1252c62ca6fadedcfe069d780593d55f64820828c14f7ad65bb4a71cc40bccad86950318ffeb3873856d755870b9b2e849cd7bd86aaacfa0d63945c96a045",
            "file": "src/app/shared/models/IDownloadable.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IDownloadable {\r\n\tdownload(): void;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "download",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": []
        },
        {
            "name": "IRenamable",
            "id": "interface-IRenamable-42e3241a2f7d646f3a497c5a5ad292cc3cac6454eebed20ee96bf0279655bc31ee487d58dd92f543193fb442811b8bddf31146487d270ae75520455884003eb4",
            "file": "src/app/shared/models/IRenamable.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IRenamable {\r\n\trename(): void;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "rename",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": []
        },
        {
            "name": "ISelectable",
            "id": "interface-ISelectable-672847f4b7d0103733d3fe22ac4fc7c1abf5d05e4b4647c0932a9a43f2ec35c7270dfde138fa792411db2626b82bdc87d07d115273d965b1daf06d7c449111ae",
            "file": "src/app/shared/models/ISelectable.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ISelectable {\r\n\tselect(): void;\r\n\tunselect(): void;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "select",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "unselect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": []
        },
        {
            "name": "Node",
            "id": "interface-Node-579d501bf1af29410771559eade02a369f83a8c5f12c942503b846bec35e3e324ccbaa06237292a5aa399efe95c03621a0a40b7d0f8dd00b076a0fa85a941587",
            "file": "src/app/features/directory-tree/state/directory-tree.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Navigate } from '@ngxs/router-plugin';\r\nimport { Action, State, StateContext } from '@ngxs/store';\r\nimport { iif, patch, removeItem, updateItem } from '@ngxs/store/operators';\r\nimport { DirectoryService } from 'generated';\r\nimport { forkJoin, map, mergeMap, tap } from 'rxjs';\r\nimport { DirectoryTreeActions } from 'src/app/features/directory-tree/state/directory-tree.actions';\r\nimport { PathUtils } from 'src/app/utils/PathUtils';\r\n\r\nexport const DirectoryTreeStateToken = 'directory_tree';\r\n\r\nexport interface DirectoryTreeStateModel {\r\n\tlastSelectedPath: string | undefined;\r\n\troot: Node;\r\n\ttree: TreeModel;\r\n}\r\n\r\nexport interface TreeModel {\r\n\t[path: string]: Array<Node>;\r\n}\r\n\r\nexport interface Node {\r\n\tid: number;\r\n\tname: string;\r\n\tpath: string;\r\n\tisCollapsed: boolean;\r\n\thasChildren: boolean;\r\n\tisSelected: boolean;\r\n}\r\n\r\n@State<DirectoryTreeStateModel>({\r\n\tname: DirectoryTreeStateToken,\r\n\tdefaults: {\r\n\t\tlastSelectedPath: undefined,\r\n\t\ttree: {},\r\n\t\troot: {\r\n\t\t\tid: 0,\r\n\t\t\tname: 'root',\r\n\t\t\tpath: '/root/',\r\n\t\t\tisCollapsed: false,\r\n\t\t\tisSelected: false,\r\n\t\t\thasChildren: true,\r\n\t\t},\r\n\t},\r\n})\r\n@Injectable()\r\nexport class DirectoryTreeState {\r\n\tprivate directoryService: DirectoryService;\r\n\r\n\tprivate id: number = 0;\r\n\r\n\tconstructor(directoryService: DirectoryService) {\r\n\t\tthis.directoryService = directoryService;\r\n\t}\r\n\r\n\t@Action(DirectoryTreeActions.FetchContent)\r\n\tpublic fetchContent(ctx: StateContext<DirectoryTreeStateModel>, action: DirectoryTreeActions.FetchContent) {\r\n\t\tif (PathUtils.ensureSlashes(action.path) in ctx.getState().tree) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\treturn this.directoryService.getDirectoryContent(action.path).pipe(\r\n\t\t\tmergeMap((content) => {\r\n\t\t\t\tconst observables = content.directories.map((directory) =>\r\n\t\t\t\t\tthis.directoryService.getDirectoryMetadata((action.path.endsWith('/') ? action.path : action.path + '/') + directory.name).pipe(\r\n\t\t\t\t\t\tmap((metadata) => ({\r\n\t\t\t\t\t\t\tid: ++this.id,\r\n\t\t\t\t\t\t\tname: metadata.name,\r\n\t\t\t\t\t\t\tpath: metadata.path,\r\n\t\t\t\t\t\t\tisCollapsed: true,\r\n\t\t\t\t\t\t\tisSelected: false,\r\n\t\t\t\t\t\t\thasChildren: metadata.directories > 0,\r\n\t\t\t\t\t\t}))\r\n\t\t\t\t\t)\r\n\t\t\t\t);\r\n\r\n\t\t\t\treturn forkJoin(observables);\r\n\t\t\t}),\r\n\t\t\ttap((children) => {\r\n\t\t\t\tconst tree = ctx.getState().tree;\r\n\r\n\t\t\t\tctx.setState(\r\n\t\t\t\t\tpatch({\r\n\t\t\t\t\t\ttree: {\r\n\t\t\t\t\t\t\t...tree,\r\n\t\t\t\t\t\t\t[PathUtils.ensureSlashes(action.path)]: children,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(DirectoryTreeActions.Remove)\r\n\tpublic remove(ctx: StateContext<DirectoryTreeStateModel>, action: DirectoryTreeActions.Remove) {\r\n\t\tconst { name, dir: parentPath } = PathUtils.parse(action.path);\r\n\t\tconst { name: parentName, dir: grandparentPath } = PathUtils.parse(parentPath);\r\n\r\n\t\tconst parentTree = ctx.getState().tree[parentPath];\r\n\t\tconst treeItem = parentTree?.find((item) => item.name === name);\r\n\r\n\t\tif (!treeItem) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\ttree: iif(\r\n\t\t\t\t\t!!ctx.getState().tree[grandparentPath],\r\n\t\t\t\t\tpatch({\r\n\t\t\t\t\t\t[grandparentPath]: updateItem(\r\n\t\t\t\t\t\t\t(item) => item.name === parentName,\r\n\t\t\t\t\t\t\tpatch({ hasChildren: parentTree.length - 1 > 0, isCollapsed: parentTree.length - 1 > 0 })\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\t[parentPath]: removeItem((item) => item.name === name),\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tpatch({\r\n\t\t\t\t\t\t[parentPath]: removeItem((item) => item.name === name),\r\n\t\t\t\t\t})\r\n\t\t\t\t),\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(DirectoryTreeActions.Collapse)\r\n\tpublic collapse(ctx: StateContext<DirectoryTreeStateModel>, action: DirectoryTreeActions.Collapse) {\r\n\t\tconst { name, dir: parent } = PathUtils.parse(action.path);\r\n\r\n\t\tconst parentTree = ctx.getState().tree[parent];\r\n\t\tconst treeItem = parentTree?.find((item) => item.name === name);\r\n\r\n\t\tif (!treeItem || treeItem.isCollapsed) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\ttree: patch({\r\n\t\t\t\t\t[parent]: updateItem((item) => item.name === name, patch({ isCollapsed: true })),\r\n\t\t\t\t}),\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(DirectoryTreeActions.Expand)\r\n\tpublic expand(ctx: StateContext<DirectoryTreeStateModel>, action: DirectoryTreeActions.Expand) {\r\n\t\tconst { name, dir: parent } = PathUtils.parse(action.path);\r\n\r\n\t\tconst parentTree = ctx.getState().tree[parent];\r\n\t\tconst treeItem = parentTree?.find((item) => item.name === name);\r\n\r\n\t\tif (!treeItem || !treeItem.isCollapsed) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\ttree: patch({\r\n\t\t\t\t\t[parent]: updateItem((item) => item.name === name, patch({ isCollapsed: false })),\r\n\t\t\t\t}),\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(DirectoryTreeActions.Open)\r\n\tpublic open(ctx: StateContext<DirectoryTreeStateModel>, action: DirectoryTreeActions.Open) {\r\n\t\tctx.dispatch(new Navigate(['tree', ...action.path.split('/').filter((part) => part !== '')]));\r\n\t}\r\n\r\n\t@Action(DirectoryTreeActions.Select)\r\n\tpublic select(ctx: StateContext<DirectoryTreeStateModel>, action: DirectoryTreeActions.Select) {\r\n\t\tconst lastSelectedPath = ctx.getState().lastSelectedPath;\r\n\r\n\t\tif (lastSelectedPath) {\r\n\t\t\tctx.dispatch(new DirectoryTreeActions.Unselect(lastSelectedPath));\r\n\t\t}\r\n\r\n\t\tconst { name, dir: parent } = PathUtils.parse(action.path);\r\n\r\n\t\tconst parentTree = ctx.getState().tree[parent];\r\n\t\tconst treeItem = parentTree?.find((item) => item.name === name);\r\n\r\n\t\tif (!treeItem || treeItem.isSelected) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\tlastSelectedPath: action.path,\r\n\t\t\t\ttree: patch({\r\n\t\t\t\t\t[parent]: updateItem((item) => item.name === name, patch({ isSelected: true, isCollapsed: !treeItem.hasChildren })),\r\n\t\t\t\t}),\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(DirectoryTreeActions.Unselect)\r\n\tpublic unselect(ctx: StateContext<DirectoryTreeStateModel>, action: DirectoryTreeActions.Unselect) {\r\n\t\tconst { name, dir: parent } = PathUtils.parse(action.path);\r\n\r\n\t\tconst parentTree = ctx.getState().tree[parent];\r\n\t\tconst treeItem = parentTree?.find((item) => item.name === name);\r\n\r\n\t\tif (!treeItem || !treeItem.isSelected) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\ttree: patch({\r\n\t\t\t\t\t[parent]: updateItem((item) => item.name === name, patch({ isSelected: false })),\r\n\t\t\t\t}),\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n}\r\n",
            "properties": [
                {
                    "name": "hasChildren",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "isCollapsed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "isSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TreeModel",
            "id": "interface-TreeModel-579d501bf1af29410771559eade02a369f83a8c5f12c942503b846bec35e3e324ccbaa06237292a5aa399efe95c03621a0a40b7d0f8dd00b076a0fa85a941587",
            "file": "src/app/features/directory-tree/state/directory-tree.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Navigate } from '@ngxs/router-plugin';\r\nimport { Action, State, StateContext } from '@ngxs/store';\r\nimport { iif, patch, removeItem, updateItem } from '@ngxs/store/operators';\r\nimport { DirectoryService } from 'generated';\r\nimport { forkJoin, map, mergeMap, tap } from 'rxjs';\r\nimport { DirectoryTreeActions } from 'src/app/features/directory-tree/state/directory-tree.actions';\r\nimport { PathUtils } from 'src/app/utils/PathUtils';\r\n\r\nexport const DirectoryTreeStateToken = 'directory_tree';\r\n\r\nexport interface DirectoryTreeStateModel {\r\n\tlastSelectedPath: string | undefined;\r\n\troot: Node;\r\n\ttree: TreeModel;\r\n}\r\n\r\nexport interface TreeModel {\r\n\t[path: string]: Array<Node>;\r\n}\r\n\r\nexport interface Node {\r\n\tid: number;\r\n\tname: string;\r\n\tpath: string;\r\n\tisCollapsed: boolean;\r\n\thasChildren: boolean;\r\n\tisSelected: boolean;\r\n}\r\n\r\n@State<DirectoryTreeStateModel>({\r\n\tname: DirectoryTreeStateToken,\r\n\tdefaults: {\r\n\t\tlastSelectedPath: undefined,\r\n\t\ttree: {},\r\n\t\troot: {\r\n\t\t\tid: 0,\r\n\t\t\tname: 'root',\r\n\t\t\tpath: '/root/',\r\n\t\t\tisCollapsed: false,\r\n\t\t\tisSelected: false,\r\n\t\t\thasChildren: true,\r\n\t\t},\r\n\t},\r\n})\r\n@Injectable()\r\nexport class DirectoryTreeState {\r\n\tprivate directoryService: DirectoryService;\r\n\r\n\tprivate id: number = 0;\r\n\r\n\tconstructor(directoryService: DirectoryService) {\r\n\t\tthis.directoryService = directoryService;\r\n\t}\r\n\r\n\t@Action(DirectoryTreeActions.FetchContent)\r\n\tpublic fetchContent(ctx: StateContext<DirectoryTreeStateModel>, action: DirectoryTreeActions.FetchContent) {\r\n\t\tif (PathUtils.ensureSlashes(action.path) in ctx.getState().tree) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\treturn this.directoryService.getDirectoryContent(action.path).pipe(\r\n\t\t\tmergeMap((content) => {\r\n\t\t\t\tconst observables = content.directories.map((directory) =>\r\n\t\t\t\t\tthis.directoryService.getDirectoryMetadata((action.path.endsWith('/') ? action.path : action.path + '/') + directory.name).pipe(\r\n\t\t\t\t\t\tmap((metadata) => ({\r\n\t\t\t\t\t\t\tid: ++this.id,\r\n\t\t\t\t\t\t\tname: metadata.name,\r\n\t\t\t\t\t\t\tpath: metadata.path,\r\n\t\t\t\t\t\t\tisCollapsed: true,\r\n\t\t\t\t\t\t\tisSelected: false,\r\n\t\t\t\t\t\t\thasChildren: metadata.directories > 0,\r\n\t\t\t\t\t\t}))\r\n\t\t\t\t\t)\r\n\t\t\t\t);\r\n\r\n\t\t\t\treturn forkJoin(observables);\r\n\t\t\t}),\r\n\t\t\ttap((children) => {\r\n\t\t\t\tconst tree = ctx.getState().tree;\r\n\r\n\t\t\t\tctx.setState(\r\n\t\t\t\t\tpatch({\r\n\t\t\t\t\t\ttree: {\r\n\t\t\t\t\t\t\t...tree,\r\n\t\t\t\t\t\t\t[PathUtils.ensureSlashes(action.path)]: children,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(DirectoryTreeActions.Remove)\r\n\tpublic remove(ctx: StateContext<DirectoryTreeStateModel>, action: DirectoryTreeActions.Remove) {\r\n\t\tconst { name, dir: parentPath } = PathUtils.parse(action.path);\r\n\t\tconst { name: parentName, dir: grandparentPath } = PathUtils.parse(parentPath);\r\n\r\n\t\tconst parentTree = ctx.getState().tree[parentPath];\r\n\t\tconst treeItem = parentTree?.find((item) => item.name === name);\r\n\r\n\t\tif (!treeItem) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\ttree: iif(\r\n\t\t\t\t\t!!ctx.getState().tree[grandparentPath],\r\n\t\t\t\t\tpatch({\r\n\t\t\t\t\t\t[grandparentPath]: updateItem(\r\n\t\t\t\t\t\t\t(item) => item.name === parentName,\r\n\t\t\t\t\t\t\tpatch({ hasChildren: parentTree.length - 1 > 0, isCollapsed: parentTree.length - 1 > 0 })\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\t[parentPath]: removeItem((item) => item.name === name),\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tpatch({\r\n\t\t\t\t\t\t[parentPath]: removeItem((item) => item.name === name),\r\n\t\t\t\t\t})\r\n\t\t\t\t),\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(DirectoryTreeActions.Collapse)\r\n\tpublic collapse(ctx: StateContext<DirectoryTreeStateModel>, action: DirectoryTreeActions.Collapse) {\r\n\t\tconst { name, dir: parent } = PathUtils.parse(action.path);\r\n\r\n\t\tconst parentTree = ctx.getState().tree[parent];\r\n\t\tconst treeItem = parentTree?.find((item) => item.name === name);\r\n\r\n\t\tif (!treeItem || treeItem.isCollapsed) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\ttree: patch({\r\n\t\t\t\t\t[parent]: updateItem((item) => item.name === name, patch({ isCollapsed: true })),\r\n\t\t\t\t}),\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(DirectoryTreeActions.Expand)\r\n\tpublic expand(ctx: StateContext<DirectoryTreeStateModel>, action: DirectoryTreeActions.Expand) {\r\n\t\tconst { name, dir: parent } = PathUtils.parse(action.path);\r\n\r\n\t\tconst parentTree = ctx.getState().tree[parent];\r\n\t\tconst treeItem = parentTree?.find((item) => item.name === name);\r\n\r\n\t\tif (!treeItem || !treeItem.isCollapsed) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\ttree: patch({\r\n\t\t\t\t\t[parent]: updateItem((item) => item.name === name, patch({ isCollapsed: false })),\r\n\t\t\t\t}),\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(DirectoryTreeActions.Open)\r\n\tpublic open(ctx: StateContext<DirectoryTreeStateModel>, action: DirectoryTreeActions.Open) {\r\n\t\tctx.dispatch(new Navigate(['tree', ...action.path.split('/').filter((part) => part !== '')]));\r\n\t}\r\n\r\n\t@Action(DirectoryTreeActions.Select)\r\n\tpublic select(ctx: StateContext<DirectoryTreeStateModel>, action: DirectoryTreeActions.Select) {\r\n\t\tconst lastSelectedPath = ctx.getState().lastSelectedPath;\r\n\r\n\t\tif (lastSelectedPath) {\r\n\t\t\tctx.dispatch(new DirectoryTreeActions.Unselect(lastSelectedPath));\r\n\t\t}\r\n\r\n\t\tconst { name, dir: parent } = PathUtils.parse(action.path);\r\n\r\n\t\tconst parentTree = ctx.getState().tree[parent];\r\n\t\tconst treeItem = parentTree?.find((item) => item.name === name);\r\n\r\n\t\tif (!treeItem || treeItem.isSelected) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\tlastSelectedPath: action.path,\r\n\t\t\t\ttree: patch({\r\n\t\t\t\t\t[parent]: updateItem((item) => item.name === name, patch({ isSelected: true, isCollapsed: !treeItem.hasChildren })),\r\n\t\t\t\t}),\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(DirectoryTreeActions.Unselect)\r\n\tpublic unselect(ctx: StateContext<DirectoryTreeStateModel>, action: DirectoryTreeActions.Unselect) {\r\n\t\tconst { name, dir: parent } = PathUtils.parse(action.path);\r\n\r\n\t\tconst parentTree = ctx.getState().tree[parent];\r\n\t\tconst treeItem = parentTree?.find((item) => item.name === name);\r\n\r\n\t\tif (!treeItem || !treeItem.isSelected) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\ttree: patch({\r\n\t\t\t\t\t[parent]: updateItem((item) => item.name === name, patch({ isSelected: false })),\r\n\t\t\t\t}),\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n}\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-579d501bf1af29410771559eade02a369f83a8c5f12c942503b846bec35e3e324ccbaa06237292a5aa399efe95c03621a0a40b7d0f8dd00b076a0fa85a941587",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Array<Node>",
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "ContentListService",
            "id": "injectable-ContentListService-ec8ff168d6adaa8c33b8eff0ed4ba812461a524c31a53ebfee78de51d0304303b7067c2646f0b4a11f250d01b2e4c96c6aee8975433c56a5c281e617d4ba97cc",
            "file": "src/app/features/content-list/content-list.service.ts",
            "properties": [
                {
                    "name": "store",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Store",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "cancelCreation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "createDirectory",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "route",
                            "type": "ActivatedRoute",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "route",
                            "type": "ActivatedRoute",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "event",
                            "type": "ListItemDeleteEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "route",
                            "type": "ActivatedRoute",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ListItemDeleteEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "route",
                            "type": "ActivatedRoute",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayDirectoryCreationWidget",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "fetchContent",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRoute",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRoute",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isAtLeastOneSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "event",
                            "type": "ListItemOpenEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "route",
                            "type": "ActivatedRoute",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ListItemOpenEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "route",
                            "type": "ActivatedRoute",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "event",
                            "type": "ListItemSelectEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ListItemSelectEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "selectContent",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Array<ContentType>>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "selectIsInCreateMode",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "unselect",
                    "args": [
                        {
                            "name": "event",
                            "type": "ListItemUnselectEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ListItemUnselectEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unselectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Store } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\nimport {\r\n\tListItemDeleteEvent,\r\n\tListItemOpenEvent,\r\n\tListItemSelectEvent,\r\n\tListItemUnselectEvent,\r\n} from 'src/app/features/content-list/components/pure-content-list/components/selectable-directory-list-item/selectable-directory-list-item.component';\r\nimport { ContentType } from 'src/app/features/content-list/components/pure-content-list/pure-content-list.component';\r\nimport { ContentListActions } from 'src/app/features/content-list/state/content-list.actions';\r\nimport { ContentListState } from 'src/app/features/content-list/state/content-list.state';\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root',\r\n})\r\nexport class ContentListService {\r\n\tprivate readonly store: Store;\r\n\r\n\tconstructor(store: Store) {\r\n\t\tthis.store = store;\r\n\t}\r\n\r\n\tpublic fetchContent(route: ActivatedRoute): Observable<void> {\r\n\t\tconst path = decodeURI(route.snapshot.url.join('/'));\r\n\r\n\t\treturn this.store.dispatch(new ContentListActions.FetchContent(path));\r\n\t}\r\n\r\n\tpublic selectContent(): Observable<Array<ContentType>> {\r\n\t\treturn this.store.select(ContentListState.selectContent);\r\n\t}\r\n\r\n\tpublic selectIsInCreateMode(): Observable<boolean> {\r\n\t\treturn this.store.select(ContentListState.selectIsInCreateMode);\r\n\t}\r\n\r\n\tpublic isAtLeastOneSelected(): Observable<boolean> {\r\n\t\treturn this.store.select(ContentListState.isAtLeastOneSelected);\r\n\t}\r\n\r\n\tpublic select(event: ListItemSelectEvent) {\r\n\t\tif (event.shift) {\r\n\t\t\tthis.store.dispatch(new ContentListActions.ShiftSelect(event.id));\r\n\t\t} else if (event.ctrl) {\r\n\t\t\tthis.store.dispatch(new ContentListActions.CtrlSelect(event.id));\r\n\t\t} else {\r\n\t\t\tthis.store.dispatch(new ContentListActions.SelectSingle(event.id));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic unselect(event: ListItemUnselectEvent) {\r\n\t\tif (event.shift) {\r\n\t\t\tthis.store.dispatch(new ContentListActions.ShiftUnselect(event.id));\r\n\t\t} else if (event.ctrl) {\r\n\t\t\tthis.store.dispatch(new ContentListActions.CtrlUnselect(event.id));\r\n\t\t} else {\r\n\t\t\tthis.store.dispatch(new ContentListActions.UnselectSingle(event.id));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic open(event: ListItemOpenEvent, route: ActivatedRoute) {\r\n\t\tthis.store.dispatch(new ContentListActions.Open(event.id, route));\r\n\t}\r\n\r\n\tpublic selectAll() {\r\n\t\tthis.store.dispatch(new ContentListActions.SelectAll());\r\n\t}\r\n\r\n\tpublic unselectAll() {\r\n\t\tthis.store.dispatch(new ContentListActions.UnselectAll());\r\n\t}\r\n\r\n\tpublic delete(event: ListItemDeleteEvent, route: ActivatedRoute) {\r\n\t\tthis.store.dispatch(new ContentListActions.Delete(event.id, route));\r\n\t}\r\n\r\n\tpublic createDirectory(name: string, route: ActivatedRoute) {\r\n\t\tthis.store.dispatch(new ContentListActions.CreateDirectory(name, route));\r\n\t}\r\n\r\n\tpublic displayDirectoryCreationWidget() {\r\n\t\tthis.store.dispatch(new ContentListActions.DisplayDirectoryCreationWidget());\r\n\t}\r\n\r\n\tpublic cancelCreation() {\r\n\t\tthis.store.dispatch(new ContentListActions.CancelCreation());\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ContentListState",
            "id": "injectable-ContentListState-5568bb9b1df6dccad2761172dca88262a322fd06cea2532e1649757d362af1ed84b254948eda8965df98b691ec7d6f7ee0b05d0296424c14b1ef1dddb104f1fa",
            "file": "src/app/features/content-list/state/content-list.state.ts",
            "properties": [
                {
                    "name": "directoryService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DirectoryService",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "fileService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FileService",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "cancelCreation",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "ContentListActions.CancelCreation"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createDirectory",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "ContentListActions.CreateDirectory",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "ContentListActions.CreateDirectory"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "ContentListActions.CreateDirectory",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "ContentListActions.Delete",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "ContentListActions.Delete"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "ContentListActions.Delete",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayDirectoryCreationWidget",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "ContentListActions.DisplayDirectoryCreationWidget"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchContent",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "ContentListActions.FetchContent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "ContentListActions.FetchContent"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "ContentListActions.FetchContent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isAtLeastOneSelected",
                    "args": [
                        {
                            "name": "state",
                            "type": "ContentListStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        170,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "ContentListStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isUnselectedInRange",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "from",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "to",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 299,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "from",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "to",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "ContentListActions.Open",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "ContentListActions.Open"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "ContentListActions.Open",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rangeSelect",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "ContentListActions.ShiftSelect | ContentListActions.CtrlSelect",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "['undefined', 'undefined']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "ContentListActions.ShiftSelect | ContentListActions.CtrlSelect",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rangeUnselect",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "ContentListActions.ShiftUnselect | ContentListActions.CtrlUnselect",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "['undefined', 'undefined']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "ContentListActions.ShiftUnselect | ContentListActions.CtrlUnselect",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectAll",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 264,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "ContentListActions.SelectAll"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectContent",
                    "args": [
                        {
                            "name": "state",
                            "type": "ContentListStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        170,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "ContentListStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectIsInCreateMode",
                    "args": [
                        {
                            "name": "state",
                            "type": "ContentListStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        170,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "ContentListStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectItem",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "ContentListActions.SelectSingle",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "ContentListActions.SelectSingle"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "ContentListActions.SelectSingle",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectRange",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "start",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "end",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 287,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "start",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "end",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unselectAll",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 276,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "ContentListActions.UnselectAll"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unselectItem",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "ContentListActions.UnselectSingle",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "ContentListActions.UnselectSingle"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "ContentListActions.UnselectSingle",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unselectRange",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "start",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "end",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 293,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ContentListStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "start",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "end",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpStatusCode } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Navigate } from '@ngxs/router-plugin';\r\nimport { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { append, patch, removeItem, updateItem } from '@ngxs/store/operators';\r\nimport { DirectoryService, FileService } from 'generated';\r\nimport { filter, switchMap, tap } from 'rxjs';\r\nimport { ContentType, Directory, File, Type } from 'src/app/features/content-list/components/pure-content-list/pure-content-list.component';\r\nimport { ContentListActions } from 'src/app/features/content-list/state/content-list.actions';\r\nimport { DirectoryTreeActions } from 'src/app/features/directory-tree/state/directory-tree.actions';\r\n\r\nexport interface ContentListStateModel {\r\n\titems: ContentType[];\r\n\tlastInteractedId: number | undefined;\r\n\tisInCreateMode: boolean;\r\n}\r\n\r\n@State<ContentListStateModel>({\r\n\tname: 'content_list',\r\n\tdefaults: {\r\n\t\tlastInteractedId: undefined,\r\n\t\tisInCreateMode: false,\r\n\t\titems: [],\r\n\t},\r\n})\r\n@Injectable()\r\nexport class ContentListState {\r\n\tprivate directoryService: DirectoryService;\r\n\r\n\tprivate fileService: FileService;\r\n\r\n\tconstructor(directoryService: DirectoryService, fileService: FileService) {\r\n\t\tthis.directoryService = directoryService;\r\n\t\tthis.fileService = fileService;\r\n\t}\r\n\r\n\t@Selector()\r\n\tpublic static selectContent(state: ContentListStateModel) {\r\n\t\treturn state.items;\r\n\t}\r\n\r\n\t@Selector()\r\n\tpublic static selectIsInCreateMode(state: ContentListStateModel) {\r\n\t\treturn state.isInCreateMode;\r\n\t}\r\n\r\n\t@Selector()\r\n\tpublic static isAtLeastOneSelected(state: ContentListStateModel) {\r\n\t\treturn state.items.some((item) => item.isSelected);\r\n\t}\r\n\r\n\t@Action(ContentListActions.CancelCreation)\r\n\tpublic cancelCreation(ctx: StateContext<ContentListStateModel>) {\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\tisInCreateMode: false,\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(ContentListActions.DisplayDirectoryCreationWidget)\r\n\tpublic displayDirectoryCreationWidget(ctx: StateContext<ContentListStateModel>) {\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\tisInCreateMode: true,\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(ContentListActions.CreateDirectory)\r\n\tpublic createDirectory(ctx: StateContext<ContentListStateModel>, action: ContentListActions.CreateDirectory) {\r\n\t\tconst path = decodeURI('/' + action.route.snapshot.url.join('/') + '/' + action.name + '/');\r\n\r\n\t\treturn this.directoryService.createDirectory(path, 'response').pipe(\r\n\t\t\tfilter((response) => response.status === HttpStatusCode.Created),\r\n\t\t\tswitchMap(() => this.directoryService.getDirectoryMetadata(path)),\r\n\t\t\ttap((metadata) => {\r\n\t\t\t\tctx.setState(\r\n\t\t\t\t\tpatch({\r\n\t\t\t\t\t\titems: append([\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t...metadata,\r\n\t\t\t\t\t\t\t\tisSelected: false,\r\n\t\t\t\t\t\t\t\tisHighlighted: true,\r\n\t\t\t\t\t\t\t\tisBeingProcessed: false,\r\n\t\t\t\t\t\t\t\tid: ctx.getState().items.length,\r\n\t\t\t\t\t\t\t\ttype: Type.Directory,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t]),\r\n\t\t\t\t\t\tisInCreateMode: false,\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(ContentListActions.Delete)\r\n\tpublic delete(ctx: StateContext<ContentListStateModel>, action: ContentListActions.Delete) {\r\n\t\tconst name = ctx.getState().items.find((item) => item.id === action.id)?.name;\r\n\r\n\t\tif (!name) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\titems: updateItem((item) => item.id === action.id, patch({ isBeingProcessed: true })),\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tconst path = decodeURI('/' + action.route.snapshot.url.join('/') + '/' + name + '/');\r\n\r\n\t\treturn this.directoryService.deleteDirectory(path, 'response').pipe(\r\n\t\t\ttap((response) => {\r\n\t\t\t\tif (response.status === HttpStatusCode.NoContent) {\r\n\t\t\t\t\tctx.setState(\r\n\t\t\t\t\t\tpatch({\r\n\t\t\t\t\t\t\titems: removeItem((item) => item.id === action.id),\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tctx.dispatch(new DirectoryTreeActions.Remove(path));\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t// @Action(ContentListActions.DeleteSelected)\r\n\t// public deleteSelected(ctx: StateContext<ContentListStateModel>, action: ContentListActions.DeleteSelected) {\r\n\t// \tconst selected = ctx.getState().items.filter((item) => item.isSelected);\r\n\r\n\t// \tctx.setState(\r\n\t// \t\tpatch({\r\n\t// \t\t\titems: updateItem((item) => selected.map((item) => item.id).includes(item.id), patch({ isBeingLoaded: true })),\r\n\t// \t\t})\r\n\t// \t);\r\n\r\n\t// \tconst observables = selected.map((item) => {\r\n\t// \t\tconst path = decodeURI(action.route.snapshot.url.join('/') + '/' + item.name);\r\n\t// \t\tif (item.type === Type.Directory) {\r\n\t// \t\t\treturn { id: item.id, path: path, observable: this.directoryService.deleteDirectory(path, 'response') };\r\n\t// \t\t} else {\r\n\t// \t\t\treturn { id: item.id, path: path, observable: this.fileService.deleteFile(path, 'response') };\r\n\t// \t\t}\r\n\t// \t});\r\n\r\n\t// \treturn forkJoin(\r\n\t// \t\tobservables.map((item) =>\r\n\t// \t\t\titem.observable.pipe(\r\n\t// \t\t\t\tmap((response) => ({\r\n\t// \t\t\t\t\tid: item.id,\r\n\t// \t\t\t\t\tpath: item.path,\r\n\t// \t\t\t\t\tresponse,\r\n\t// \t\t\t\t}))\r\n\t// \t\t\t)\r\n\t// \t\t)\r\n\t// \t).pipe(\r\n\t// \t\tdelay(5000),\r\n\t// \t\ttap((results) => {\r\n\t// \t\t\tfor (const result of results) {\r\n\t// \t\t\t\tif (result.response.status === HttpStatusCode.NoContent) {\r\n\t// \t\t\t\t\tctx.setState(\r\n\t// \t\t\t\t\t\tpatch({\r\n\t// \t\t\t\t\t\t\titems: removeItem((item) => item.id === result.id),\r\n\t// \t\t\t\t\t\t})\r\n\t// \t\t\t\t\t);\r\n\r\n\t// \t\t\t\t\tctx.dispatch(new DirectoryTreeActions.Remove(result.path));\r\n\t// \t\t\t\t}\r\n\t// \t\t\t}\r\n\t// \t\t})\r\n\t// \t);\r\n\t// }\r\n\r\n\t@Action(ContentListActions.FetchContent)\r\n\tpublic fetchContent(ctx: StateContext<ContentListStateModel>, action: ContentListActions.FetchContent) {\r\n\t\treturn this.directoryService.getDirectoryContent(action.path).pipe(\r\n\t\t\ttap((content) => {\r\n\t\t\t\tctx.setState(\r\n\t\t\t\t\tpatch({\r\n\t\t\t\t\t\titems: [\r\n\t\t\t\t\t\t\t...(content.directories.map((directory) => ({ isSelected: false, type: Type.Directory, ...directory })) as Omit<Directory, 'id'>[]),\r\n\t\t\t\t\t\t\t...(content.files.map((file) => ({ isSelected: false, type: Type.File, ...file })) as Omit<File, 'id'>[]),\r\n\t\t\t\t\t\t].map((element, index) => ({ id: index, ...element })),\r\n\t\t\t\t\t\tlastInteractedId: undefined,\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(ContentListActions.Open)\r\n\tpublic open(ctx: StateContext<ContentListStateModel>, action: ContentListActions.Open) {\r\n\t\tconst name = ctx.getState().items.find((item) => item.id === action.id)?.name;\r\n\r\n\t\tif (!name) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tctx.dispatch(new Navigate([name], {}, { relativeTo: action.route }));\r\n\t}\r\n\r\n\t@Action(ContentListActions.SelectSingle)\r\n\tpublic selectItem(ctx: StateContext<ContentListStateModel>, action: ContentListActions.SelectSingle) {\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\titems: updateItem((item) => item.id === action.id, patch({ isSelected: true })),\r\n\t\t\t\tlastInteractedId: action.id,\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(ContentListActions.UnselectSingle)\r\n\tpublic unselectItem(ctx: StateContext<ContentListStateModel>, action: ContentListActions.UnselectSingle) {\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\titems: updateItem((item) => item.id === action.id, patch({ isSelected: false })),\r\n\t\t\t\tlastInteractedId: action.id,\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action([ContentListActions.ShiftSelect, ContentListActions.CtrlSelect])\r\n\tpublic rangeSelect(ctx: StateContext<ContentListStateModel>, action: ContentListActions.ShiftSelect | ContentListActions.CtrlSelect) {\r\n\t\tconst lastInteractedId = ctx.getState().lastInteractedId;\r\n\r\n\t\tif (lastInteractedId === undefined) {\r\n\t\t\tctx.dispatch(new ContentListActions.SelectSingle(action.id));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst start = Math.min(lastInteractedId, action.id);\r\n\t\tconst end = Math.max(lastInteractedId, action.id);\r\n\r\n\t\tif (end - start <= 2 || this.isUnselectedInRange(ctx, start, end)) {\r\n\t\t\tthis.selectRange(ctx, start, end);\r\n\t\t} else {\r\n\t\t\tthis.unselectRange(ctx, start, end);\r\n\t\t}\r\n\t}\r\n\r\n\t@Action([ContentListActions.ShiftUnselect, ContentListActions.CtrlUnselect])\r\n\tpublic rangeUnselect(ctx: StateContext<ContentListStateModel>, action: ContentListActions.ShiftUnselect | ContentListActions.CtrlUnselect) {\r\n\t\tconst lastInteractedId = ctx.getState().lastInteractedId;\r\n\r\n\t\tif (lastInteractedId === undefined) {\r\n\t\t\tctx.dispatch(new ContentListActions.SelectSingle(action.id));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst start = Math.min(lastInteractedId, action.id);\r\n\t\tconst end = Math.max(lastInteractedId, action.id);\r\n\r\n\t\tif (this.isUnselectedInRange(ctx, start, end)) {\r\n\t\t\tthis.selectRange(ctx, start, end);\r\n\t\t} else {\r\n\t\t\tthis.unselectRange(ctx, start === action.id ? start + 1 : start, end);\r\n\t\t}\r\n\r\n\t\tctx.dispatch(new ContentListActions.SelectSingle(action.id));\r\n\t}\r\n\r\n\t@Action(ContentListActions.SelectAll)\r\n\tpublic selectAll(ctx: StateContext<ContentListStateModel>) {\r\n\t\tconst items = ctx.getState().items;\r\n\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\titems: items.map((item) => ({ ...item, isSelected: true })),\r\n\t\t\t\tlastInteractedId: items.at(-1)?.id,\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(ContentListActions.UnselectAll)\r\n\tpublic unselectAll(ctx: StateContext<ContentListStateModel>) {\r\n\t\tconst items = ctx.getState().items;\r\n\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\titems: items.map((item) => ({ ...item, isSelected: false })),\r\n\t\t\t\tlastInteractedId: items.at(0)?.id,\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\tprivate selectRange(ctx: StateContext<ContentListStateModel>, start: number, end: number) {\r\n\t\tfor (let i = start; i <= end; i++) {\r\n\t\t\tctx.dispatch(new ContentListActions.SelectSingle(i));\r\n\t\t}\r\n\t}\r\n\r\n\tprivate unselectRange(ctx: StateContext<ContentListStateModel>, start: number, end: number) {\r\n\t\tfor (let i = start; i <= end; i++) {\r\n\t\t\tctx.dispatch(new ContentListActions.UnselectSingle(i));\r\n\t\t}\r\n\t}\r\n\r\n\tprivate isUnselectedInRange(ctx: StateContext<ContentListStateModel>, from: number, to: number): boolean {\r\n\t\tif (from > to) {\r\n\t\t\t[from, to] = [to, from];\r\n\t\t}\r\n\r\n\t\treturn ctx.getState().items.find((item) => item.id >= from && item.id <= to && !item.isSelected) !== undefined;\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "directoryService",
                        "type": "DirectoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fileService",
                        "type": "FileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "directoryService",
                        "type": "DirectoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fileService",
                        "type": "FileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "DirectoryTreeState",
            "id": "injectable-DirectoryTreeState-579d501bf1af29410771559eade02a369f83a8c5f12c942503b846bec35e3e324ccbaa06237292a5aa399efe95c03621a0a40b7d0f8dd00b076a0fa85a941587",
            "file": "src/app/features/directory-tree/state/directory-tree.state.ts",
            "properties": [
                {
                    "name": "directoryService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DirectoryService",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "id",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "collapse",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<DirectoryTreeStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "DirectoryTreeActions.Collapse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "DirectoryTreeActions.Collapse"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<DirectoryTreeStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "DirectoryTreeActions.Collapse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "expand",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<DirectoryTreeStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "DirectoryTreeActions.Expand",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "DirectoryTreeActions.Expand"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<DirectoryTreeStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "DirectoryTreeActions.Expand",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchContent",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<DirectoryTreeStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "DirectoryTreeActions.FetchContent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "DirectoryTreeActions.FetchContent"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<DirectoryTreeStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "DirectoryTreeActions.FetchContent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<DirectoryTreeStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "DirectoryTreeActions.Open",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "DirectoryTreeActions.Open"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<DirectoryTreeStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "DirectoryTreeActions.Open",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<DirectoryTreeStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "DirectoryTreeActions.Remove",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "DirectoryTreeActions.Remove"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<DirectoryTreeStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "DirectoryTreeActions.Remove",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<DirectoryTreeStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "DirectoryTreeActions.Select",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "DirectoryTreeActions.Select"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<DirectoryTreeStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "DirectoryTreeActions.Select",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unselect",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<DirectoryTreeStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "DirectoryTreeActions.Unselect",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "DirectoryTreeActions.Unselect"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<DirectoryTreeStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "DirectoryTreeActions.Unselect",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Navigate } from '@ngxs/router-plugin';\r\nimport { Action, State, StateContext } from '@ngxs/store';\r\nimport { iif, patch, removeItem, updateItem } from '@ngxs/store/operators';\r\nimport { DirectoryService } from 'generated';\r\nimport { forkJoin, map, mergeMap, tap } from 'rxjs';\r\nimport { DirectoryTreeActions } from 'src/app/features/directory-tree/state/directory-tree.actions';\r\nimport { PathUtils } from 'src/app/utils/PathUtils';\r\n\r\nexport const DirectoryTreeStateToken = 'directory_tree';\r\n\r\nexport interface DirectoryTreeStateModel {\r\n\tlastSelectedPath: string | undefined;\r\n\troot: Node;\r\n\ttree: TreeModel;\r\n}\r\n\r\nexport interface TreeModel {\r\n\t[path: string]: Array<Node>;\r\n}\r\n\r\nexport interface Node {\r\n\tid: number;\r\n\tname: string;\r\n\tpath: string;\r\n\tisCollapsed: boolean;\r\n\thasChildren: boolean;\r\n\tisSelected: boolean;\r\n}\r\n\r\n@State<DirectoryTreeStateModel>({\r\n\tname: DirectoryTreeStateToken,\r\n\tdefaults: {\r\n\t\tlastSelectedPath: undefined,\r\n\t\ttree: {},\r\n\t\troot: {\r\n\t\t\tid: 0,\r\n\t\t\tname: 'root',\r\n\t\t\tpath: '/root/',\r\n\t\t\tisCollapsed: false,\r\n\t\t\tisSelected: false,\r\n\t\t\thasChildren: true,\r\n\t\t},\r\n\t},\r\n})\r\n@Injectable()\r\nexport class DirectoryTreeState {\r\n\tprivate directoryService: DirectoryService;\r\n\r\n\tprivate id: number = 0;\r\n\r\n\tconstructor(directoryService: DirectoryService) {\r\n\t\tthis.directoryService = directoryService;\r\n\t}\r\n\r\n\t@Action(DirectoryTreeActions.FetchContent)\r\n\tpublic fetchContent(ctx: StateContext<DirectoryTreeStateModel>, action: DirectoryTreeActions.FetchContent) {\r\n\t\tif (PathUtils.ensureSlashes(action.path) in ctx.getState().tree) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\treturn this.directoryService.getDirectoryContent(action.path).pipe(\r\n\t\t\tmergeMap((content) => {\r\n\t\t\t\tconst observables = content.directories.map((directory) =>\r\n\t\t\t\t\tthis.directoryService.getDirectoryMetadata((action.path.endsWith('/') ? action.path : action.path + '/') + directory.name).pipe(\r\n\t\t\t\t\t\tmap((metadata) => ({\r\n\t\t\t\t\t\t\tid: ++this.id,\r\n\t\t\t\t\t\t\tname: metadata.name,\r\n\t\t\t\t\t\t\tpath: metadata.path,\r\n\t\t\t\t\t\t\tisCollapsed: true,\r\n\t\t\t\t\t\t\tisSelected: false,\r\n\t\t\t\t\t\t\thasChildren: metadata.directories > 0,\r\n\t\t\t\t\t\t}))\r\n\t\t\t\t\t)\r\n\t\t\t\t);\r\n\r\n\t\t\t\treturn forkJoin(observables);\r\n\t\t\t}),\r\n\t\t\ttap((children) => {\r\n\t\t\t\tconst tree = ctx.getState().tree;\r\n\r\n\t\t\t\tctx.setState(\r\n\t\t\t\t\tpatch({\r\n\t\t\t\t\t\ttree: {\r\n\t\t\t\t\t\t\t...tree,\r\n\t\t\t\t\t\t\t[PathUtils.ensureSlashes(action.path)]: children,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(DirectoryTreeActions.Remove)\r\n\tpublic remove(ctx: StateContext<DirectoryTreeStateModel>, action: DirectoryTreeActions.Remove) {\r\n\t\tconst { name, dir: parentPath } = PathUtils.parse(action.path);\r\n\t\tconst { name: parentName, dir: grandparentPath } = PathUtils.parse(parentPath);\r\n\r\n\t\tconst parentTree = ctx.getState().tree[parentPath];\r\n\t\tconst treeItem = parentTree?.find((item) => item.name === name);\r\n\r\n\t\tif (!treeItem) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\ttree: iif(\r\n\t\t\t\t\t!!ctx.getState().tree[grandparentPath],\r\n\t\t\t\t\tpatch({\r\n\t\t\t\t\t\t[grandparentPath]: updateItem(\r\n\t\t\t\t\t\t\t(item) => item.name === parentName,\r\n\t\t\t\t\t\t\tpatch({ hasChildren: parentTree.length - 1 > 0, isCollapsed: parentTree.length - 1 > 0 })\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\t[parentPath]: removeItem((item) => item.name === name),\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tpatch({\r\n\t\t\t\t\t\t[parentPath]: removeItem((item) => item.name === name),\r\n\t\t\t\t\t})\r\n\t\t\t\t),\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(DirectoryTreeActions.Collapse)\r\n\tpublic collapse(ctx: StateContext<DirectoryTreeStateModel>, action: DirectoryTreeActions.Collapse) {\r\n\t\tconst { name, dir: parent } = PathUtils.parse(action.path);\r\n\r\n\t\tconst parentTree = ctx.getState().tree[parent];\r\n\t\tconst treeItem = parentTree?.find((item) => item.name === name);\r\n\r\n\t\tif (!treeItem || treeItem.isCollapsed) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\ttree: patch({\r\n\t\t\t\t\t[parent]: updateItem((item) => item.name === name, patch({ isCollapsed: true })),\r\n\t\t\t\t}),\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(DirectoryTreeActions.Expand)\r\n\tpublic expand(ctx: StateContext<DirectoryTreeStateModel>, action: DirectoryTreeActions.Expand) {\r\n\t\tconst { name, dir: parent } = PathUtils.parse(action.path);\r\n\r\n\t\tconst parentTree = ctx.getState().tree[parent];\r\n\t\tconst treeItem = parentTree?.find((item) => item.name === name);\r\n\r\n\t\tif (!treeItem || !treeItem.isCollapsed) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\ttree: patch({\r\n\t\t\t\t\t[parent]: updateItem((item) => item.name === name, patch({ isCollapsed: false })),\r\n\t\t\t\t}),\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(DirectoryTreeActions.Open)\r\n\tpublic open(ctx: StateContext<DirectoryTreeStateModel>, action: DirectoryTreeActions.Open) {\r\n\t\tctx.dispatch(new Navigate(['tree', ...action.path.split('/').filter((part) => part !== '')]));\r\n\t}\r\n\r\n\t@Action(DirectoryTreeActions.Select)\r\n\tpublic select(ctx: StateContext<DirectoryTreeStateModel>, action: DirectoryTreeActions.Select) {\r\n\t\tconst lastSelectedPath = ctx.getState().lastSelectedPath;\r\n\r\n\t\tif (lastSelectedPath) {\r\n\t\t\tctx.dispatch(new DirectoryTreeActions.Unselect(lastSelectedPath));\r\n\t\t}\r\n\r\n\t\tconst { name, dir: parent } = PathUtils.parse(action.path);\r\n\r\n\t\tconst parentTree = ctx.getState().tree[parent];\r\n\t\tconst treeItem = parentTree?.find((item) => item.name === name);\r\n\r\n\t\tif (!treeItem || treeItem.isSelected) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\tlastSelectedPath: action.path,\r\n\t\t\t\ttree: patch({\r\n\t\t\t\t\t[parent]: updateItem((item) => item.name === name, patch({ isSelected: true, isCollapsed: !treeItem.hasChildren })),\r\n\t\t\t\t}),\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@Action(DirectoryTreeActions.Unselect)\r\n\tpublic unselect(ctx: StateContext<DirectoryTreeStateModel>, action: DirectoryTreeActions.Unselect) {\r\n\t\tconst { name, dir: parent } = PathUtils.parse(action.path);\r\n\r\n\t\tconst parentTree = ctx.getState().tree[parent];\r\n\t\tconst treeItem = parentTree?.find((item) => item.name === name);\r\n\r\n\t\tif (!treeItem || !treeItem.isSelected) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tctx.setState(\r\n\t\t\tpatch({\r\n\t\t\t\ttree: patch({\r\n\t\t\t\t\t[parent]: updateItem((item) => item.name === name, patch({ isSelected: false })),\r\n\t\t\t\t}),\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "directoryService",
                        "type": "DirectoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "directoryService",
                        "type": "DirectoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "CancelCreation",
            "id": "class-CancelCreation-fc45bc2ff1e0666632a9e34a856f93d5088e68b18fcb8ce28464dfa74afa058a3b4d7c2cafee01646c1ec658454aebc33593216daa126a0c063a9cca98baf347",
            "file": "src/app/features/content-list/state/content-list.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ActivatedRoute } from '@angular/router';\r\n\r\nexport namespace ContentListActions {\r\n\texport class SelectSingle {\r\n\t\tpublic static readonly type = '[Content List] Select Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class UnselectSingle {\r\n\t\tpublic static readonly type = '[Content List] Unselect Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class SelectAll {\r\n\t\tpublic static readonly type = '[Content List] Select All';\r\n\t}\r\n\r\n\texport class UnselectAll {\r\n\t\tpublic static readonly type = '[Content List] Unselect All';\r\n\t}\r\n\r\n\texport class ShiftSelect {\r\n\t\tpublic static readonly type = '[Content List] Shift Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class ShiftUnselect {\r\n\t\tpublic static readonly type = '[Content List] Shift Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlSelect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlUnselect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Open {\r\n\t\tpublic static readonly type = '[Content List] Open';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Delete {\r\n\t\tpublic static readonly type = '[Content List] Delete';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DeleteSelected {\r\n\t\tpublic static readonly type = '[Content List] DeleteSelected';\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class FetchContent {\r\n\t\tpublic static readonly type = '[Content List] Fetch Content';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CreateDirectory {\r\n\t\tpublic static readonly type = '[Content List] Create Directory';\r\n\r\n\t\tpublic readonly name: string;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(name: string, route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t\tthis.name = name;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DisplayDirectoryCreationWidget {\r\n\t\tpublic static readonly type = '[Content List] Display Directory Creation Widget';\r\n\t}\r\n\r\n\texport class CancelCreation {\r\n\t\tpublic static readonly type = '[Content List] Cancel Creation';\r\n\t}\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Content List] Cancel Creation'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 136,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Collapse",
            "id": "class-Collapse-78de53a22f9755d9380cb985abc31042bfedd191d841dab0fa51c2a0e466e274fe1919e7bce481edc0499f044a363c03074a1b46c8d585dd66689de586d46f72",
            "file": "src/app/features/directory-tree/state/directory-tree.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export namespace DirectoryTreeActions {\r\n\texport class FetchContent {\r\n\t\tpublic static readonly type = '[Directory Tree] Fetch Content';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Open {\r\n\t\tpublic static readonly type = '[Directory Tree] Open';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Unselect {\r\n\t\tpublic static readonly type = '[Directory Tree] Unselect';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Select {\r\n\t\tpublic static readonly type = '[Directory Tree] Select';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Expand {\r\n\t\tpublic static readonly type = '[Directory Tree] Expand';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Collapse {\r\n\t\tpublic static readonly type = '[Directory Tree] Collapse';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Remove {\r\n\t\tpublic static readonly type = '[Directory Tree] Remove';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "path",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "path",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Directory Tree] Collapse'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CreateDirectory",
            "id": "class-CreateDirectory-fc45bc2ff1e0666632a9e34a856f93d5088e68b18fcb8ce28464dfa74afa058a3b4d7c2cafee01646c1ec658454aebc33593216daa126a0c063a9cca98baf347",
            "file": "src/app/features/content-list/state/content-list.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ActivatedRoute } from '@angular/router';\r\n\r\nexport namespace ContentListActions {\r\n\texport class SelectSingle {\r\n\t\tpublic static readonly type = '[Content List] Select Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class UnselectSingle {\r\n\t\tpublic static readonly type = '[Content List] Unselect Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class SelectAll {\r\n\t\tpublic static readonly type = '[Content List] Select All';\r\n\t}\r\n\r\n\texport class UnselectAll {\r\n\t\tpublic static readonly type = '[Content List] Unselect All';\r\n\t}\r\n\r\n\texport class ShiftSelect {\r\n\t\tpublic static readonly type = '[Content List] Shift Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class ShiftUnselect {\r\n\t\tpublic static readonly type = '[Content List] Shift Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlSelect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlUnselect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Open {\r\n\t\tpublic static readonly type = '[Content List] Open';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Delete {\r\n\t\tpublic static readonly type = '[Content List] Delete';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DeleteSelected {\r\n\t\tpublic static readonly type = '[Content List] DeleteSelected';\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class FetchContent {\r\n\t\tpublic static readonly type = '[Content List] Fetch Content';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CreateDirectory {\r\n\t\tpublic static readonly type = '[Content List] Create Directory';\r\n\r\n\t\tpublic readonly name: string;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(name: string, route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t\tthis.name = name;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DisplayDirectoryCreationWidget {\r\n\t\tpublic static readonly type = '[Content List] Display Directory Creation Widget';\r\n\t}\r\n\r\n\texport class CancelCreation {\r\n\t\tpublic static readonly type = '[Content List] Cancel Creation';\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 123,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 121,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute",
                    "optional": false,
                    "description": "",
                    "line": 123,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Content List] Create Directory'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 119,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CtrlSelect",
            "id": "class-CtrlSelect-fc45bc2ff1e0666632a9e34a856f93d5088e68b18fcb8ce28464dfa74afa058a3b4d7c2cafee01646c1ec658454aebc33593216daa126a0c063a9cca98baf347",
            "file": "src/app/features/content-list/state/content-list.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ActivatedRoute } from '@angular/router';\r\n\r\nexport namespace ContentListActions {\r\n\texport class SelectSingle {\r\n\t\tpublic static readonly type = '[Content List] Select Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class UnselectSingle {\r\n\t\tpublic static readonly type = '[Content List] Unselect Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class SelectAll {\r\n\t\tpublic static readonly type = '[Content List] Select All';\r\n\t}\r\n\r\n\texport class UnselectAll {\r\n\t\tpublic static readonly type = '[Content List] Unselect All';\r\n\t}\r\n\r\n\texport class ShiftSelect {\r\n\t\tpublic static readonly type = '[Content List] Shift Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class ShiftUnselect {\r\n\t\tpublic static readonly type = '[Content List] Shift Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlSelect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlUnselect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Open {\r\n\t\tpublic static readonly type = '[Content List] Open';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Delete {\r\n\t\tpublic static readonly type = '[Content List] Delete';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DeleteSelected {\r\n\t\tpublic static readonly type = '[Content List] DeleteSelected';\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class FetchContent {\r\n\t\tpublic static readonly type = '[Content List] Fetch Content';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CreateDirectory {\r\n\t\tpublic static readonly type = '[Content List] Create Directory';\r\n\r\n\t\tpublic readonly name: string;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(name: string, route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t\tthis.name = name;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DisplayDirectoryCreationWidget {\r\n\t\tpublic static readonly type = '[Content List] Display Directory Creation Widget';\r\n\t}\r\n\r\n\texport class CancelCreation {\r\n\t\tpublic static readonly type = '[Content List] Cancel Creation';\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Content List] Ctrl Select'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CtrlUnselect",
            "id": "class-CtrlUnselect-fc45bc2ff1e0666632a9e34a856f93d5088e68b18fcb8ce28464dfa74afa058a3b4d7c2cafee01646c1ec658454aebc33593216daa126a0c063a9cca98baf347",
            "file": "src/app/features/content-list/state/content-list.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ActivatedRoute } from '@angular/router';\r\n\r\nexport namespace ContentListActions {\r\n\texport class SelectSingle {\r\n\t\tpublic static readonly type = '[Content List] Select Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class UnselectSingle {\r\n\t\tpublic static readonly type = '[Content List] Unselect Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class SelectAll {\r\n\t\tpublic static readonly type = '[Content List] Select All';\r\n\t}\r\n\r\n\texport class UnselectAll {\r\n\t\tpublic static readonly type = '[Content List] Unselect All';\r\n\t}\r\n\r\n\texport class ShiftSelect {\r\n\t\tpublic static readonly type = '[Content List] Shift Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class ShiftUnselect {\r\n\t\tpublic static readonly type = '[Content List] Shift Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlSelect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlUnselect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Open {\r\n\t\tpublic static readonly type = '[Content List] Open';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Delete {\r\n\t\tpublic static readonly type = '[Content List] Delete';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DeleteSelected {\r\n\t\tpublic static readonly type = '[Content List] DeleteSelected';\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class FetchContent {\r\n\t\tpublic static readonly type = '[Content List] Fetch Content';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CreateDirectory {\r\n\t\tpublic static readonly type = '[Content List] Create Directory';\r\n\r\n\t\tpublic readonly name: string;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(name: string, route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t\tthis.name = name;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DisplayDirectoryCreationWidget {\r\n\t\tpublic static readonly type = '[Content List] Display Directory Creation Widget';\r\n\t}\r\n\r\n\texport class CancelCreation {\r\n\t\tpublic static readonly type = '[Content List] Cancel Creation';\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Content List] Ctrl Unselect'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Delete",
            "id": "class-Delete-fc45bc2ff1e0666632a9e34a856f93d5088e68b18fcb8ce28464dfa74afa058a3b4d7c2cafee01646c1ec658454aebc33593216daa126a0c063a9cca98baf347",
            "file": "src/app/features/content-list/state/content-list.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ActivatedRoute } from '@angular/router';\r\n\r\nexport namespace ContentListActions {\r\n\texport class SelectSingle {\r\n\t\tpublic static readonly type = '[Content List] Select Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class UnselectSingle {\r\n\t\tpublic static readonly type = '[Content List] Unselect Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class SelectAll {\r\n\t\tpublic static readonly type = '[Content List] Select All';\r\n\t}\r\n\r\n\texport class UnselectAll {\r\n\t\tpublic static readonly type = '[Content List] Unselect All';\r\n\t}\r\n\r\n\texport class ShiftSelect {\r\n\t\tpublic static readonly type = '[Content List] Shift Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class ShiftUnselect {\r\n\t\tpublic static readonly type = '[Content List] Shift Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlSelect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlUnselect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Open {\r\n\t\tpublic static readonly type = '[Content List] Open';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Delete {\r\n\t\tpublic static readonly type = '[Content List] Delete';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DeleteSelected {\r\n\t\tpublic static readonly type = '[Content List] DeleteSelected';\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class FetchContent {\r\n\t\tpublic static readonly type = '[Content List] Fetch Content';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CreateDirectory {\r\n\t\tpublic static readonly type = '[Content List] Create Directory';\r\n\r\n\t\tpublic readonly name: string;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(name: string, route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t\tthis.name = name;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DisplayDirectoryCreationWidget {\r\n\t\tpublic static readonly type = '[Content List] Display Directory Creation Widget';\r\n\t}\r\n\r\n\texport class CancelCreation {\r\n\t\tpublic static readonly type = '[Content List] Cancel Creation';\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 90,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Content List] Delete'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DeleteSelected",
            "id": "class-DeleteSelected-fc45bc2ff1e0666632a9e34a856f93d5088e68b18fcb8ce28464dfa74afa058a3b4d7c2cafee01646c1ec658454aebc33593216daa126a0c063a9cca98baf347",
            "file": "src/app/features/content-list/state/content-list.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ActivatedRoute } from '@angular/router';\r\n\r\nexport namespace ContentListActions {\r\n\texport class SelectSingle {\r\n\t\tpublic static readonly type = '[Content List] Select Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class UnselectSingle {\r\n\t\tpublic static readonly type = '[Content List] Unselect Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class SelectAll {\r\n\t\tpublic static readonly type = '[Content List] Select All';\r\n\t}\r\n\r\n\texport class UnselectAll {\r\n\t\tpublic static readonly type = '[Content List] Unselect All';\r\n\t}\r\n\r\n\texport class ShiftSelect {\r\n\t\tpublic static readonly type = '[Content List] Shift Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class ShiftUnselect {\r\n\t\tpublic static readonly type = '[Content List] Shift Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlSelect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlUnselect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Open {\r\n\t\tpublic static readonly type = '[Content List] Open';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Delete {\r\n\t\tpublic static readonly type = '[Content List] Delete';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DeleteSelected {\r\n\t\tpublic static readonly type = '[Content List] DeleteSelected';\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class FetchContent {\r\n\t\tpublic static readonly type = '[Content List] Fetch Content';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CreateDirectory {\r\n\t\tpublic static readonly type = '[Content List] Create Directory';\r\n\r\n\t\tpublic readonly name: string;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(name: string, route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t\tthis.name = name;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DisplayDirectoryCreationWidget {\r\n\t\tpublic static readonly type = '[Content List] Display Directory Creation Widget';\r\n\t}\r\n\r\n\texport class CancelCreation {\r\n\t\tpublic static readonly type = '[Content List] Cancel Creation';\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 101,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute",
                    "optional": false,
                    "description": "",
                    "line": 101,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Content List] DeleteSelected'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DisplayDirectoryCreationWidget",
            "id": "class-DisplayDirectoryCreationWidget-fc45bc2ff1e0666632a9e34a856f93d5088e68b18fcb8ce28464dfa74afa058a3b4d7c2cafee01646c1ec658454aebc33593216daa126a0c063a9cca98baf347",
            "file": "src/app/features/content-list/state/content-list.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ActivatedRoute } from '@angular/router';\r\n\r\nexport namespace ContentListActions {\r\n\texport class SelectSingle {\r\n\t\tpublic static readonly type = '[Content List] Select Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class UnselectSingle {\r\n\t\tpublic static readonly type = '[Content List] Unselect Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class SelectAll {\r\n\t\tpublic static readonly type = '[Content List] Select All';\r\n\t}\r\n\r\n\texport class UnselectAll {\r\n\t\tpublic static readonly type = '[Content List] Unselect All';\r\n\t}\r\n\r\n\texport class ShiftSelect {\r\n\t\tpublic static readonly type = '[Content List] Shift Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class ShiftUnselect {\r\n\t\tpublic static readonly type = '[Content List] Shift Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlSelect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlUnselect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Open {\r\n\t\tpublic static readonly type = '[Content List] Open';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Delete {\r\n\t\tpublic static readonly type = '[Content List] Delete';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DeleteSelected {\r\n\t\tpublic static readonly type = '[Content List] DeleteSelected';\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class FetchContent {\r\n\t\tpublic static readonly type = '[Content List] Fetch Content';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CreateDirectory {\r\n\t\tpublic static readonly type = '[Content List] Create Directory';\r\n\r\n\t\tpublic readonly name: string;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(name: string, route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t\tthis.name = name;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DisplayDirectoryCreationWidget {\r\n\t\tpublic static readonly type = '[Content List] Display Directory Creation Widget';\r\n\t}\r\n\r\n\texport class CancelCreation {\r\n\t\tpublic static readonly type = '[Content List] Cancel Creation';\r\n\t}\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Content List] Display Directory Creation Widget'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 132,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Expand",
            "id": "class-Expand-78de53a22f9755d9380cb985abc31042bfedd191d841dab0fa51c2a0e466e274fe1919e7bce481edc0499f044a363c03074a1b46c8d585dd66689de586d46f72",
            "file": "src/app/features/directory-tree/state/directory-tree.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export namespace DirectoryTreeActions {\r\n\texport class FetchContent {\r\n\t\tpublic static readonly type = '[Directory Tree] Fetch Content';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Open {\r\n\t\tpublic static readonly type = '[Directory Tree] Open';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Unselect {\r\n\t\tpublic static readonly type = '[Directory Tree] Unselect';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Select {\r\n\t\tpublic static readonly type = '[Directory Tree] Select';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Expand {\r\n\t\tpublic static readonly type = '[Directory Tree] Expand';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Collapse {\r\n\t\tpublic static readonly type = '[Directory Tree] Collapse';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Remove {\r\n\t\tpublic static readonly type = '[Directory Tree] Remove';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "path",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "path",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Directory Tree] Expand'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FetchContent",
            "id": "class-FetchContent-fc45bc2ff1e0666632a9e34a856f93d5088e68b18fcb8ce28464dfa74afa058a3b4d7c2cafee01646c1ec658454aebc33593216daa126a0c063a9cca98baf347",
            "file": "src/app/features/content-list/state/content-list.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ActivatedRoute } from '@angular/router';\r\n\r\nexport namespace ContentListActions {\r\n\texport class SelectSingle {\r\n\t\tpublic static readonly type = '[Content List] Select Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class UnselectSingle {\r\n\t\tpublic static readonly type = '[Content List] Unselect Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class SelectAll {\r\n\t\tpublic static readonly type = '[Content List] Select All';\r\n\t}\r\n\r\n\texport class UnselectAll {\r\n\t\tpublic static readonly type = '[Content List] Unselect All';\r\n\t}\r\n\r\n\texport class ShiftSelect {\r\n\t\tpublic static readonly type = '[Content List] Shift Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class ShiftUnselect {\r\n\t\tpublic static readonly type = '[Content List] Shift Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlSelect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlUnselect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Open {\r\n\t\tpublic static readonly type = '[Content List] Open';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Delete {\r\n\t\tpublic static readonly type = '[Content List] Delete';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DeleteSelected {\r\n\t\tpublic static readonly type = '[Content List] DeleteSelected';\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class FetchContent {\r\n\t\tpublic static readonly type = '[Content List] Fetch Content';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CreateDirectory {\r\n\t\tpublic static readonly type = '[Content List] Create Directory';\r\n\r\n\t\tpublic readonly name: string;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(name: string, route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t\tthis.name = name;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DisplayDirectoryCreationWidget {\r\n\t\tpublic static readonly type = '[Content List] Display Directory Creation Widget';\r\n\t}\r\n\r\n\texport class CancelCreation {\r\n\t\tpublic static readonly type = '[Content List] Cancel Creation';\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "path",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 111,
                "jsdoctags": [
                    {
                        "name": "path",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Content List] Fetch Content'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FetchContent",
            "id": "class-FetchContent-78de53a22f9755d9380cb985abc31042bfedd191d841dab0fa51c2a0e466e274fe1919e7bce481edc0499f044a363c03074a1b46c8d585dd66689de586d46f72-1",
            "file": "src/app/features/directory-tree/state/directory-tree.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export namespace DirectoryTreeActions {\r\n\texport class FetchContent {\r\n\t\tpublic static readonly type = '[Directory Tree] Fetch Content';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Open {\r\n\t\tpublic static readonly type = '[Directory Tree] Open';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Unselect {\r\n\t\tpublic static readonly type = '[Directory Tree] Unselect';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Select {\r\n\t\tpublic static readonly type = '[Directory Tree] Select';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Expand {\r\n\t\tpublic static readonly type = '[Directory Tree] Expand';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Collapse {\r\n\t\tpublic static readonly type = '[Directory Tree] Collapse';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Remove {\r\n\t\tpublic static readonly type = '[Directory Tree] Remove';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "path",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "path",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Directory Tree] Fetch Content'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "FetchContent-1"
        },
        {
            "name": "Open",
            "id": "class-Open-fc45bc2ff1e0666632a9e34a856f93d5088e68b18fcb8ce28464dfa74afa058a3b4d7c2cafee01646c1ec658454aebc33593216daa126a0c063a9cca98baf347",
            "file": "src/app/features/content-list/state/content-list.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ActivatedRoute } from '@angular/router';\r\n\r\nexport namespace ContentListActions {\r\n\texport class SelectSingle {\r\n\t\tpublic static readonly type = '[Content List] Select Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class UnselectSingle {\r\n\t\tpublic static readonly type = '[Content List] Unselect Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class SelectAll {\r\n\t\tpublic static readonly type = '[Content List] Select All';\r\n\t}\r\n\r\n\texport class UnselectAll {\r\n\t\tpublic static readonly type = '[Content List] Unselect All';\r\n\t}\r\n\r\n\texport class ShiftSelect {\r\n\t\tpublic static readonly type = '[Content List] Shift Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class ShiftUnselect {\r\n\t\tpublic static readonly type = '[Content List] Shift Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlSelect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlUnselect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Open {\r\n\t\tpublic static readonly type = '[Content List] Open';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Delete {\r\n\t\tpublic static readonly type = '[Content List] Delete';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DeleteSelected {\r\n\t\tpublic static readonly type = '[Content List] DeleteSelected';\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class FetchContent {\r\n\t\tpublic static readonly type = '[Content List] Fetch Content';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CreateDirectory {\r\n\t\tpublic static readonly type = '[Content List] Create Directory';\r\n\r\n\t\tpublic readonly name: string;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(name: string, route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t\tthis.name = name;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DisplayDirectoryCreationWidget {\r\n\t\tpublic static readonly type = '[Content List] Display Directory Creation Widget';\r\n\t}\r\n\r\n\texport class CancelCreation {\r\n\t\tpublic static readonly type = '[Content List] Cancel Creation';\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 77,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Content List] Open'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Open",
            "id": "class-Open-78de53a22f9755d9380cb985abc31042bfedd191d841dab0fa51c2a0e466e274fe1919e7bce481edc0499f044a363c03074a1b46c8d585dd66689de586d46f72-1",
            "file": "src/app/features/directory-tree/state/directory-tree.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export namespace DirectoryTreeActions {\r\n\texport class FetchContent {\r\n\t\tpublic static readonly type = '[Directory Tree] Fetch Content';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Open {\r\n\t\tpublic static readonly type = '[Directory Tree] Open';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Unselect {\r\n\t\tpublic static readonly type = '[Directory Tree] Unselect';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Select {\r\n\t\tpublic static readonly type = '[Directory Tree] Select';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Expand {\r\n\t\tpublic static readonly type = '[Directory Tree] Expand';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Collapse {\r\n\t\tpublic static readonly type = '[Directory Tree] Collapse';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Remove {\r\n\t\tpublic static readonly type = '[Directory Tree] Remove';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "path",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "path",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Directory Tree] Open'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Open-1"
        },
        {
            "name": "PathUtils",
            "id": "class-PathUtils-82471e3965f8ed81414102c9e1214d3088b8fe49c0ce7457687db762172aa6e15e6242fb7020404e83b9315719d67da161af67a69470c432ee34143de07067e0",
            "file": "src/app/utils/PathUtils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class PathUtils {\r\n\tpublic static ensureSlashes(path: string) {\r\n\t\tconst parts = path.split('/').filter((part) => part !== '');\r\n\r\n\t\treturn '/' + parts.join('/') + '/';\r\n\t}\r\n\r\n\tpublic static dirname(path: string) {\r\n\t\treturn path.replace(/\\/$/gim, '').split('/').slice(0, -1).join('/').concat('/');\r\n\t}\r\n\r\n\tpublic static basename(path: string) {\r\n\t\treturn path.replace(/\\/$/gim, '').split('/').at(-1);\r\n\t}\r\n\r\n\tpublic static parse(path: string) {\r\n\t\treturn {\r\n\t\t\tname: PathUtils.basename(path),\r\n\t\t\tdir: PathUtils.dirname(path),\r\n\t\t};\r\n\t}\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "basename",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dirname",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ensureSlashes",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parse",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ name: any; dir: any; }",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Remove",
            "id": "class-Remove-78de53a22f9755d9380cb985abc31042bfedd191d841dab0fa51c2a0e466e274fe1919e7bce481edc0499f044a363c03074a1b46c8d585dd66689de586d46f72",
            "file": "src/app/features/directory-tree/state/directory-tree.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export namespace DirectoryTreeActions {\r\n\texport class FetchContent {\r\n\t\tpublic static readonly type = '[Directory Tree] Fetch Content';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Open {\r\n\t\tpublic static readonly type = '[Directory Tree] Open';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Unselect {\r\n\t\tpublic static readonly type = '[Directory Tree] Unselect';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Select {\r\n\t\tpublic static readonly type = '[Directory Tree] Select';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Expand {\r\n\t\tpublic static readonly type = '[Directory Tree] Expand';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Collapse {\r\n\t\tpublic static readonly type = '[Directory Tree] Collapse';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Remove {\r\n\t\tpublic static readonly type = '[Directory Tree] Remove';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "path",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "path",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Directory Tree] Remove'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Select",
            "id": "class-Select-78de53a22f9755d9380cb985abc31042bfedd191d841dab0fa51c2a0e466e274fe1919e7bce481edc0499f044a363c03074a1b46c8d585dd66689de586d46f72",
            "file": "src/app/features/directory-tree/state/directory-tree.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export namespace DirectoryTreeActions {\r\n\texport class FetchContent {\r\n\t\tpublic static readonly type = '[Directory Tree] Fetch Content';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Open {\r\n\t\tpublic static readonly type = '[Directory Tree] Open';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Unselect {\r\n\t\tpublic static readonly type = '[Directory Tree] Unselect';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Select {\r\n\t\tpublic static readonly type = '[Directory Tree] Select';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Expand {\r\n\t\tpublic static readonly type = '[Directory Tree] Expand';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Collapse {\r\n\t\tpublic static readonly type = '[Directory Tree] Collapse';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Remove {\r\n\t\tpublic static readonly type = '[Directory Tree] Remove';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "path",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "path",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Directory Tree] Select'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SelectAll",
            "id": "class-SelectAll-fc45bc2ff1e0666632a9e34a856f93d5088e68b18fcb8ce28464dfa74afa058a3b4d7c2cafee01646c1ec658454aebc33593216daa126a0c063a9cca98baf347",
            "file": "src/app/features/content-list/state/content-list.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ActivatedRoute } from '@angular/router';\r\n\r\nexport namespace ContentListActions {\r\n\texport class SelectSingle {\r\n\t\tpublic static readonly type = '[Content List] Select Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class UnselectSingle {\r\n\t\tpublic static readonly type = '[Content List] Unselect Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class SelectAll {\r\n\t\tpublic static readonly type = '[Content List] Select All';\r\n\t}\r\n\r\n\texport class UnselectAll {\r\n\t\tpublic static readonly type = '[Content List] Unselect All';\r\n\t}\r\n\r\n\texport class ShiftSelect {\r\n\t\tpublic static readonly type = '[Content List] Shift Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class ShiftUnselect {\r\n\t\tpublic static readonly type = '[Content List] Shift Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlSelect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlUnselect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Open {\r\n\t\tpublic static readonly type = '[Content List] Open';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Delete {\r\n\t\tpublic static readonly type = '[Content List] Delete';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DeleteSelected {\r\n\t\tpublic static readonly type = '[Content List] DeleteSelected';\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class FetchContent {\r\n\t\tpublic static readonly type = '[Content List] Fetch Content';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CreateDirectory {\r\n\t\tpublic static readonly type = '[Content List] Create Directory';\r\n\r\n\t\tpublic readonly name: string;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(name: string, route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t\tthis.name = name;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DisplayDirectoryCreationWidget {\r\n\t\tpublic static readonly type = '[Content List] Display Directory Creation Widget';\r\n\t}\r\n\r\n\texport class CancelCreation {\r\n\t\tpublic static readonly type = '[Content List] Cancel Creation';\r\n\t}\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Content List] Select All'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SelectSingle",
            "id": "class-SelectSingle-fc45bc2ff1e0666632a9e34a856f93d5088e68b18fcb8ce28464dfa74afa058a3b4d7c2cafee01646c1ec658454aebc33593216daa126a0c063a9cca98baf347",
            "file": "src/app/features/content-list/state/content-list.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ActivatedRoute } from '@angular/router';\r\n\r\nexport namespace ContentListActions {\r\n\texport class SelectSingle {\r\n\t\tpublic static readonly type = '[Content List] Select Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class UnselectSingle {\r\n\t\tpublic static readonly type = '[Content List] Unselect Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class SelectAll {\r\n\t\tpublic static readonly type = '[Content List] Select All';\r\n\t}\r\n\r\n\texport class UnselectAll {\r\n\t\tpublic static readonly type = '[Content List] Unselect All';\r\n\t}\r\n\r\n\texport class ShiftSelect {\r\n\t\tpublic static readonly type = '[Content List] Shift Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class ShiftUnselect {\r\n\t\tpublic static readonly type = '[Content List] Shift Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlSelect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlUnselect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Open {\r\n\t\tpublic static readonly type = '[Content List] Open';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Delete {\r\n\t\tpublic static readonly type = '[Content List] Delete';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DeleteSelected {\r\n\t\tpublic static readonly type = '[Content List] DeleteSelected';\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class FetchContent {\r\n\t\tpublic static readonly type = '[Content List] Fetch Content';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CreateDirectory {\r\n\t\tpublic static readonly type = '[Content List] Create Directory';\r\n\r\n\t\tpublic readonly name: string;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(name: string, route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t\tthis.name = name;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DisplayDirectoryCreationWidget {\r\n\t\tpublic static readonly type = '[Content List] Display Directory Creation Widget';\r\n\t}\r\n\r\n\texport class CancelCreation {\r\n\t\tpublic static readonly type = '[Content List] Cancel Creation';\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Content List] Select Single'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ShiftSelect",
            "id": "class-ShiftSelect-fc45bc2ff1e0666632a9e34a856f93d5088e68b18fcb8ce28464dfa74afa058a3b4d7c2cafee01646c1ec658454aebc33593216daa126a0c063a9cca98baf347",
            "file": "src/app/features/content-list/state/content-list.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ActivatedRoute } from '@angular/router';\r\n\r\nexport namespace ContentListActions {\r\n\texport class SelectSingle {\r\n\t\tpublic static readonly type = '[Content List] Select Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class UnselectSingle {\r\n\t\tpublic static readonly type = '[Content List] Unselect Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class SelectAll {\r\n\t\tpublic static readonly type = '[Content List] Select All';\r\n\t}\r\n\r\n\texport class UnselectAll {\r\n\t\tpublic static readonly type = '[Content List] Unselect All';\r\n\t}\r\n\r\n\texport class ShiftSelect {\r\n\t\tpublic static readonly type = '[Content List] Shift Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class ShiftUnselect {\r\n\t\tpublic static readonly type = '[Content List] Shift Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlSelect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlUnselect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Open {\r\n\t\tpublic static readonly type = '[Content List] Open';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Delete {\r\n\t\tpublic static readonly type = '[Content List] Delete';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DeleteSelected {\r\n\t\tpublic static readonly type = '[Content List] DeleteSelected';\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class FetchContent {\r\n\t\tpublic static readonly type = '[Content List] Fetch Content';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CreateDirectory {\r\n\t\tpublic static readonly type = '[Content List] Create Directory';\r\n\r\n\t\tpublic readonly name: string;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(name: string, route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t\tthis.name = name;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DisplayDirectoryCreationWidget {\r\n\t\tpublic static readonly type = '[Content List] Display Directory Creation Widget';\r\n\t}\r\n\r\n\texport class CancelCreation {\r\n\t\tpublic static readonly type = '[Content List] Cancel Creation';\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Content List] Shift Select'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ShiftUnselect",
            "id": "class-ShiftUnselect-fc45bc2ff1e0666632a9e34a856f93d5088e68b18fcb8ce28464dfa74afa058a3b4d7c2cafee01646c1ec658454aebc33593216daa126a0c063a9cca98baf347",
            "file": "src/app/features/content-list/state/content-list.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ActivatedRoute } from '@angular/router';\r\n\r\nexport namespace ContentListActions {\r\n\texport class SelectSingle {\r\n\t\tpublic static readonly type = '[Content List] Select Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class UnselectSingle {\r\n\t\tpublic static readonly type = '[Content List] Unselect Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class SelectAll {\r\n\t\tpublic static readonly type = '[Content List] Select All';\r\n\t}\r\n\r\n\texport class UnselectAll {\r\n\t\tpublic static readonly type = '[Content List] Unselect All';\r\n\t}\r\n\r\n\texport class ShiftSelect {\r\n\t\tpublic static readonly type = '[Content List] Shift Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class ShiftUnselect {\r\n\t\tpublic static readonly type = '[Content List] Shift Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlSelect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlUnselect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Open {\r\n\t\tpublic static readonly type = '[Content List] Open';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Delete {\r\n\t\tpublic static readonly type = '[Content List] Delete';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DeleteSelected {\r\n\t\tpublic static readonly type = '[Content List] DeleteSelected';\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class FetchContent {\r\n\t\tpublic static readonly type = '[Content List] Fetch Content';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CreateDirectory {\r\n\t\tpublic static readonly type = '[Content List] Create Directory';\r\n\r\n\t\tpublic readonly name: string;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(name: string, route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t\tthis.name = name;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DisplayDirectoryCreationWidget {\r\n\t\tpublic static readonly type = '[Content List] Display Directory Creation Widget';\r\n\t}\r\n\r\n\texport class CancelCreation {\r\n\t\tpublic static readonly type = '[Content List] Cancel Creation';\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Content List] Shift Unselect'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Unselect",
            "id": "class-Unselect-78de53a22f9755d9380cb985abc31042bfedd191d841dab0fa51c2a0e466e274fe1919e7bce481edc0499f044a363c03074a1b46c8d585dd66689de586d46f72",
            "file": "src/app/features/directory-tree/state/directory-tree.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export namespace DirectoryTreeActions {\r\n\texport class FetchContent {\r\n\t\tpublic static readonly type = '[Directory Tree] Fetch Content';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Open {\r\n\t\tpublic static readonly type = '[Directory Tree] Open';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Unselect {\r\n\t\tpublic static readonly type = '[Directory Tree] Unselect';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Select {\r\n\t\tpublic static readonly type = '[Directory Tree] Select';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Expand {\r\n\t\tpublic static readonly type = '[Directory Tree] Expand';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Collapse {\r\n\t\tpublic static readonly type = '[Directory Tree] Collapse';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Remove {\r\n\t\tpublic static readonly type = '[Directory Tree] Remove';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "path",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "path",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Directory Tree] Unselect'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UnselectAll",
            "id": "class-UnselectAll-fc45bc2ff1e0666632a9e34a856f93d5088e68b18fcb8ce28464dfa74afa058a3b4d7c2cafee01646c1ec658454aebc33593216daa126a0c063a9cca98baf347",
            "file": "src/app/features/content-list/state/content-list.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ActivatedRoute } from '@angular/router';\r\n\r\nexport namespace ContentListActions {\r\n\texport class SelectSingle {\r\n\t\tpublic static readonly type = '[Content List] Select Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class UnselectSingle {\r\n\t\tpublic static readonly type = '[Content List] Unselect Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class SelectAll {\r\n\t\tpublic static readonly type = '[Content List] Select All';\r\n\t}\r\n\r\n\texport class UnselectAll {\r\n\t\tpublic static readonly type = '[Content List] Unselect All';\r\n\t}\r\n\r\n\texport class ShiftSelect {\r\n\t\tpublic static readonly type = '[Content List] Shift Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class ShiftUnselect {\r\n\t\tpublic static readonly type = '[Content List] Shift Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlSelect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlUnselect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Open {\r\n\t\tpublic static readonly type = '[Content List] Open';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Delete {\r\n\t\tpublic static readonly type = '[Content List] Delete';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DeleteSelected {\r\n\t\tpublic static readonly type = '[Content List] DeleteSelected';\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class FetchContent {\r\n\t\tpublic static readonly type = '[Content List] Fetch Content';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CreateDirectory {\r\n\t\tpublic static readonly type = '[Content List] Create Directory';\r\n\r\n\t\tpublic readonly name: string;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(name: string, route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t\tthis.name = name;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DisplayDirectoryCreationWidget {\r\n\t\tpublic static readonly type = '[Content List] Display Directory Creation Widget';\r\n\t}\r\n\r\n\texport class CancelCreation {\r\n\t\tpublic static readonly type = '[Content List] Cancel Creation';\r\n\t}\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Content List] Unselect All'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UnselectSingle",
            "id": "class-UnselectSingle-fc45bc2ff1e0666632a9e34a856f93d5088e68b18fcb8ce28464dfa74afa058a3b4d7c2cafee01646c1ec658454aebc33593216daa126a0c063a9cca98baf347",
            "file": "src/app/features/content-list/state/content-list.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ActivatedRoute } from '@angular/router';\r\n\r\nexport namespace ContentListActions {\r\n\texport class SelectSingle {\r\n\t\tpublic static readonly type = '[Content List] Select Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class UnselectSingle {\r\n\t\tpublic static readonly type = '[Content List] Unselect Single';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class SelectAll {\r\n\t\tpublic static readonly type = '[Content List] Select All';\r\n\t}\r\n\r\n\texport class UnselectAll {\r\n\t\tpublic static readonly type = '[Content List] Unselect All';\r\n\t}\r\n\r\n\texport class ShiftSelect {\r\n\t\tpublic static readonly type = '[Content List] Shift Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class ShiftUnselect {\r\n\t\tpublic static readonly type = '[Content List] Shift Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlSelect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Select';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CtrlUnselect {\r\n\t\tpublic static readonly type = '[Content List] Ctrl Unselect';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tconstructor(id: number) {\r\n\t\t\tthis.id = id;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Open {\r\n\t\tpublic static readonly type = '[Content List] Open';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Delete {\r\n\t\tpublic static readonly type = '[Content List] Delete';\r\n\r\n\t\tpublic readonly id: number;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(id: number, route: ActivatedRoute) {\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DeleteSelected {\r\n\t\tpublic static readonly type = '[Content List] DeleteSelected';\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t}\r\n\t}\r\n\r\n\texport class FetchContent {\r\n\t\tpublic static readonly type = '[Content List] Fetch Content';\r\n\r\n\t\tpublic readonly path: string;\r\n\r\n\t\tconstructor(path: string) {\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\texport class CreateDirectory {\r\n\t\tpublic static readonly type = '[Content List] Create Directory';\r\n\r\n\t\tpublic readonly name: string;\r\n\r\n\t\tpublic readonly route: ActivatedRoute;\r\n\r\n\t\tconstructor(name: string, route: ActivatedRoute) {\r\n\t\t\tthis.route = route;\r\n\t\t\tthis.name = name;\r\n\t\t}\r\n\t}\r\n\r\n\texport class DisplayDirectoryCreationWidget {\r\n\t\tpublic static readonly type = '[Content List] Display Directory Creation Widget';\r\n\t}\r\n\r\n\texport class CancelCreation {\r\n\t\tpublic static readonly type = '[Content List] Cancel Creation';\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Content List] Unselect Single'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-e4426352eec561462e187e2aab30050355ad85d0dae082eff1ccbb25c63c9ff8ef0d9491df38a63a0e431cc21d6b26a8b79da70b09519be5dd0170baed9a8a76",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "lightTheme",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.light-theme'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.light-theme",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\n\r\n@Component({\r\n\tstandalone: true,\r\n\tselector: 'app',\r\n\ttemplateUrl: './app.component.html',\r\n\tstyleUrl: './app.component.css',\r\n\timports: [RouterOutlet],\r\n})\r\nexport class AppComponent {\r\n\t@HostBinding('class.light-theme')\r\n\tprivate readonly lightTheme: boolean = true;\r\n}\r\n",
            "styleUrl": "./app.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<router-outlet></router-outlet>\r\n"
        },
        {
            "name": "BreadcrumbsComponent",
            "id": "component-BreadcrumbsComponent-123cda414dc6dea0f3a2bbfcf77587b905d89bddea17d51c00d20788bbe4b3710af872caec2833451d3e7749ef2e5f1c2463d45a2e2ffcba2aa9c8c0f347bba4",
            "file": "src/app/features/breadcrumbs/breadcrumbs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "breadcrumbs",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./breadcrumbs.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "crumbs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "PureBreadcrumbsComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { filter } from 'rxjs';\r\nimport { PureBreadcrumbsComponent } from './components/pure-breadcrumbs/pure-breadcrumbs.component';\r\n\r\n@Component({\r\n\tstandalone: true,\r\n\tselector: 'breadcrumbs',\r\n\tstyleUrl: './breadcrumbs.component.css',\r\n\ttemplateUrl: './breadcrumbs.component.html',\r\n\timports: [PureBreadcrumbsComponent],\r\n})\r\nexport class BreadcrumbsComponent {\r\n\tprivate readonly router: Router;\r\n\r\n\tprivate readonly route: ActivatedRoute;\r\n\r\n\tpublic crumbs: Array<string> = [];\r\n\r\n\tpublic constructor(router: Router, route: ActivatedRoute) {\r\n\t\tthis.router = router;\r\n\t\tthis.route = route;\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\tthis.router.events\r\n\t\t\t.pipe(filter((event): event is NavigationEnd => event instanceof NavigationEnd))\r\n\t\t\t.subscribe(() => (this.crumbs = this.route.snapshot.url.map((segment) => segment.path).slice(1)));\r\n\r\n\t\tthis.crumbs = this.route.snapshot.url.map((segment) => segment.path).slice(1);\r\n\t}\r\n\r\n\tpublic onClick(id: number) {\r\n\t\tthis.router.navigate(['tree', 'root', ...this.crumbs.slice(0, id)]);\r\n\t}\r\n}\r\n",
            "styleUrl": "./breadcrumbs.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "modifierKind": [
                    125
                ],
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<pure-breadcrumbs [crumbs]=\"crumbs\" (onClick)=\"onClick($event)\"></pure-breadcrumbs>\r\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-07d1c05e05026dbb42b2a600e98b4a87032791f1173be1b6262eac59298273f86a37c754ffa721d55a7c36ae1c8b5627fbd1f55ca5560ce7d5b5b9fb86f7b602",
            "file": "src/app/shared/components/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "checkbox",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isSelected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCheck",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter<CheckboxCheckEvent>"
                },
                {
                    "name": "onUncheck",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter<CheckboxUncheckEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "PointerEvent | MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "PointerEvent | MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, HostBinding, Input, Output, ViewChild } from '@angular/core';\r\n\r\nexport type CheckboxCheckEvent = {\r\n\tctrl: boolean;\r\n\tshift: boolean;\r\n\talt: boolean;\r\n\tnativeEvent: MouseEvent | PointerEvent;\r\n};\r\n\r\nexport type CheckboxUncheckEvent = {\r\n\tctrl: boolean;\r\n\tshift: boolean;\r\n\talt: boolean;\r\n\tnativeEvent: MouseEvent | PointerEvent;\r\n};\r\n\r\n@Component({\r\n\tselector: 'checkbox',\r\n\tstandalone: true,\r\n\ttemplateUrl: './checkbox.component.html',\r\n\tstyleUrl: './checkbox.component.css',\r\n})\r\nexport class CheckboxComponent {\r\n\t@ViewChild('input')\r\n\tpublic input!: ElementRef<HTMLInputElement>;\r\n\r\n\t@Output()\r\n\tpublic onCheck: EventEmitter<CheckboxCheckEvent> = new EventEmitter();\r\n\r\n\t@Output()\r\n\tpublic onUncheck: EventEmitter<CheckboxUncheckEvent> = new EventEmitter();\r\n\r\n\t@HostBinding('class.selected')\r\n\t@Input('isSelected')\r\n\tpublic isSelected: boolean = false;\r\n\r\n\tpublic onClick(event: PointerEvent | MouseEvent) {\r\n\t\tevent.preventDefault();\r\n\r\n\t\t// this.isSelected = !this.isSelected;\r\n\r\n\t\tconst payload: CheckboxCheckEvent | CheckboxUncheckEvent = { nativeEvent: event, ctrl: event.ctrlKey, shift: event.shiftKey, alt: event.altKey };\r\n\r\n\t\tif (!this.isSelected) {\r\n\t\t\tthis.onCheck.emit(payload);\r\n\t\t} else {\r\n\t\t\tthis.onUncheck.emit(payload);\r\n\t\t}\r\n\t}\r\n}\r\n",
            "styleUrl": "./checkbox.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<label>\r\n\t<input #input type=\"checkbox\" (click)=\"onClick($event)\" />\r\n\t<div class=\"wrapper\">\r\n\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 -960 960 960\">\r\n\t\t\t<path\r\n\t\t\t\td=\"m382-354 339-339q12-12 28-12t28 12q12 12 12 28.5T777-636L410-268q-12 12-28 12t-28-12L182-440q-12-12-11.5-28.5T183-497q12-12 28.5-12t28.5 12l142 143Z\"\r\n\t\t\t/>\r\n\t\t</svg>\r\n\t</div>\r\n</label>\r\n"
        },
        {
            "name": "ContentListComponent",
            "id": "component-ContentListComponent-3f39393f7683fed32238b6a03b1982b8b8b0358e7eaf93878d47192aa45ae3475aecbf21959e791ec4a0649942abe609c9c2f0e52db9034976a0c7822657e10b",
            "file": "src/app/features/content-list/content-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "content-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./content-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ContentType>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "content$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Array<ContentType>>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "isInCreateMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isInCreateMode$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "isInSelectMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isInSelectMode$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContentListService",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCancelCreation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCreate",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "event",
                            "type": "ListItemDeleteEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ListItemDeleteEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onOpen",
                    "args": [
                        {
                            "name": "event",
                            "type": "ListItemOpenEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ListItemOpenEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPlusClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelect",
                    "args": [
                        {
                            "name": "event",
                            "type": "ListItemSelectEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ListItemSelectEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onUnselect",
                    "args": [
                        {
                            "name": "event",
                            "type": "ListItemUnselectEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ListItemUnselectEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "unselectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "PureContentListComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { filter, Observable, Subscription } from 'rxjs';\r\nimport {\r\n\tListItemDeleteEvent,\r\n\tListItemOpenEvent,\r\n\tListItemSelectEvent,\r\n\tListItemUnselectEvent,\r\n} from 'src/app/features/content-list/components/pure-content-list/components/selectable-directory-list-item/selectable-directory-list-item.component';\r\nimport { ContentType, PureContentListComponent } from 'src/app/features/content-list/components/pure-content-list/pure-content-list.component';\r\nimport { ContentListService } from 'src/app/features/content-list/content-list.service';\r\n\r\n@Component({\r\n\tselector: 'content-list',\r\n\tstandalone: true,\r\n\ttemplateUrl: './content-list.component.html',\r\n\tstyleUrl: './content-list.component.css',\r\n\timports: [PureContentListComponent],\r\n})\r\nexport class ContentListComponent {\r\n\tprivate readonly service: ContentListService;\r\n\r\n\tprivate readonly router: Router;\r\n\r\n\tprivate readonly route: ActivatedRoute;\r\n\r\n\tprivate readonly content$: Observable<Array<ContentType>>;\r\n\r\n\tprivate readonly isInSelectMode$: Observable<boolean>;\r\n\r\n\tprivate readonly isInCreateMode$: Observable<boolean>;\r\n\r\n\tprivate readonly subscriptions: Subscription = new Subscription();\r\n\r\n\tpublic isInCreateMode: boolean = false;\r\n\r\n\tpublic isInSelectMode: boolean = false;\r\n\r\n\tpublic content: Array<ContentType> = [];\r\n\r\n\tconstructor(service: ContentListService, route: ActivatedRoute, router: Router) {\r\n\t\tthis.service = service;\r\n\t\tthis.route = route;\r\n\t\tthis.router = router;\r\n\r\n\t\tthis.isInCreateMode$ = service.selectIsInCreateMode();\r\n\t\tthis.content$ = service.selectContent();\r\n\t\tthis.isInSelectMode$ = service.isAtLeastOneSelected();\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\tthis.service.fetchContent(this.route);\r\n\r\n\t\tthis.subscriptions.add(\r\n\t\t\tthis.router.events\r\n\t\t\t\t.pipe(filter((event): event is NavigationEnd => event instanceof NavigationEnd))\r\n\t\t\t\t.subscribe(() => this.service.fetchContent(this.route))\r\n\t\t);\r\n\r\n\t\tthis.subscriptions.add(\r\n\t\t\tthis.content$.subscribe((content) => {\r\n\t\t\t\tthis.content = content;\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tthis.subscriptions.add(\r\n\t\t\tthis.isInSelectMode$.subscribe((isInSelectMode) => {\r\n\t\t\t\tthis.isInSelectMode = isInSelectMode;\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tthis.subscriptions.add(\r\n\t\t\tthis.isInCreateMode$.subscribe((isInCreateMode) => {\r\n\t\t\t\tthis.isInCreateMode = isInCreateMode;\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\tngOnDestroy() {\r\n\t\tthis.subscriptions.unsubscribe();\r\n\t}\r\n\r\n\tonSelect(event: ListItemSelectEvent) {\r\n\t\tthis.service.select(event);\r\n\t}\r\n\r\n\tonUnselect(event: ListItemUnselectEvent) {\r\n\t\tthis.service.unselect(event);\r\n\t}\r\n\r\n\tonOpen(event: ListItemOpenEvent) {\r\n\t\tthis.service.open(event, this.route);\r\n\t}\r\n\r\n\tselectAll() {\r\n\t\tthis.service.selectAll();\r\n\t}\r\n\r\n\tunselectAll() {\r\n\t\tthis.service.unselectAll();\r\n\t}\r\n\r\n\tonDelete(event: ListItemDeleteEvent) {\r\n\t\tconst confirmation = confirm(`Sicher, dass du ${this.content.find((x) => x.id === event.id)?.name} löschen willst?`);\r\n\r\n\t\tif (confirmation) {\r\n\t\t\tthis.service.delete(event, this.route);\r\n\t\t}\r\n\t}\r\n\r\n\tonPlusClick() {\r\n\t\tthis.service.displayDirectoryCreationWidget();\r\n\t}\r\n\r\n\tonCreate(name: string) {\r\n\t\tthis.service.createDirectory(name, this.route);\r\n\t}\r\n\r\n\tonCancelCreation() {\r\n\t\tthis.service.cancelCreation();\r\n\t}\r\n}\r\n",
            "styleUrl": "./content-list.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "ContentListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "ContentListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<pure-content-list\r\n\t[content]=\"content\"\r\n\t[isInSelectMode]=\"isInSelectMode\"\r\n\t(onClickOutside)=\"unselectAll()\"\r\n\t(onSelectAll)=\"selectAll()\"\r\n\t(onUnselectAll)=\"unselectAll()\"\r\n\t(onSelect)=\"onSelect($event)\"\r\n\t(onUnselect)=\"onUnselect($event)\"\r\n\t(onOpen)=\"onOpen($event)\"\r\n\t(onDelete)=\"onDelete($event)\"\r\n\t(onCreate)=\"onCreate($event)\"\r\n\t(onPlusClick)=\"onPlusClick()\"\r\n\t(onCancelCreation)=\"onCancelCreation()\"\r\n\t[displayNameableDirectoryItem]=\"isInCreateMode\"\r\n></pure-content-list>\r\n"
        },
        {
            "name": "DirectoryListItemComponent",
            "id": "component-DirectoryListItemComponent-12bddfcd85c71320d7ce2d4e43fcaea77f459d2f2f5da629f1254fa72ae5eb756b301e53aab6a03b798d5f30b3f5fbc39a53c8646eadae8d8edeee3bfddc35bc",
            "file": "src/app/shared/components/directory-list-item/directory-list-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "directory-list-item",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./directory-list-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isBeingProcessed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isHighlighted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSelected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 18,
                    "type": "DirectoryContentDirectory",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onDelete",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onDownload",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onRename",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "download",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatBytes",
                    "args": [
                        {
                            "name": "bytes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "decimals",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "bytes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "decimals",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatDate",
                    "args": [
                        {
                            "name": "dateOrString",
                            "type": "Date | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dateOrString",
                            "type": "Date | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rename",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "select",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "unselect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "LoadingSpinnerComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';\r\nimport { DirectoryContentDirectory } from 'generated';\r\nimport { IDeletable } from 'src/app/shared/models/IDeletable';\r\nimport { IDownloadable } from 'src/app/shared/models/IDownloadable';\r\nimport { IRenamable } from 'src/app/shared/models/IRenamable';\r\nimport { ISelectable } from 'src/app/shared/models/ISelectable';\r\nimport { LoadingSpinnerComponent } from '../loading-spinner/loading-spinner.component';\r\n\r\n@Component({\r\n\tselector: 'directory-list-item',\r\n\tstandalone: true,\r\n\ttemplateUrl: './directory-list-item.component.html',\r\n\tstyleUrl: './directory-list-item.component.css',\r\n\timports: [LoadingSpinnerComponent],\r\n})\r\nexport class DirectoryListItemComponent implements ISelectable, IDownloadable, IRenamable, IDeletable {\r\n\t@Input({ required: true })\r\n\tpublic metadata!: DirectoryContentDirectory;\r\n\r\n\t@HostBinding('class.selected')\r\n\t@Input('isSelected')\r\n\tpublic isSelected: boolean = false;\r\n\r\n\t@HostBinding('class.highlighted')\r\n\t@Input('isHighlighted')\r\n\tpublic isHighlighted: boolean = false;\r\n\r\n\t@HostBinding('class.is-being-processed')\r\n\t@Input()\r\n\tpublic isBeingProcessed: boolean = false;\r\n\r\n\t@Output()\r\n\tpublic onRename: EventEmitter<void> = new EventEmitter();\r\n\r\n\t@Output()\r\n\tpublic onDelete: EventEmitter<void> = new EventEmitter();\r\n\r\n\t@Output()\r\n\tpublic onDownload: EventEmitter<void> = new EventEmitter();\r\n\r\n\tselect(): void {\r\n\t\tthis.isSelected = true;\r\n\t}\r\n\r\n\tunselect(): void {\r\n\t\tthis.isSelected = false;\r\n\t}\r\n\r\n\tpublic rename(event?: Event): void {\r\n\t\tevent?.preventDefault();\r\n\r\n\t\tthis.onRename.emit();\r\n\t}\r\n\r\n\tpublic delete(event?: Event): void {\r\n\t\tevent?.preventDefault();\r\n\r\n\t\tthis.onDelete.emit();\r\n\t}\r\n\r\n\tpublic download(event?: Event): void {\r\n\t\tevent?.preventDefault();\r\n\r\n\t\tthis.onDownload.emit();\r\n\t}\r\n\r\n\tprotected formatBytes(bytes: number, decimals: number = 2): string {\r\n\t\tif (!+bytes) return '0 B';\r\n\r\n\t\tconst k = 1024;\r\n\t\tconst dm = decimals < 0 ? 0 : decimals;\r\n\t\tconst sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\r\n\r\n\t\tconst i = Math.floor(Math.log(bytes) / Math.log(k));\r\n\r\n\t\treturn `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;\r\n\t}\r\n\r\n\tprotected formatDate(dateOrString: Date | string): string {\r\n\t\tconst date = dateOrString instanceof Date ? dateOrString : new Date(Date.parse(dateOrString));\r\n\r\n\t\tconst day = date.toLocaleDateString('de-DE', { day: 'numeric' });\r\n\t\tconst month = date.toLocaleDateString('de-DE', { month: 'short' });\r\n\t\tconst year = date.toLocaleDateString('de-DE', { year: '2-digit' });\r\n\r\n\t\treturn `${day} ${month} ${year}`;\r\n\t}\r\n}\r\n",
            "styleUrl": "./directory-list-item.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "ISelectable",
                "IDownloadable",
                "IRenamable",
                "IDeletable"
            ],
            "templateData": "<div class=\"icon\">\r\n\t<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 25 19\">\r\n\t\t<path fill=\"var(--color-secondary-400)\" d=\"M2 0 10 0 14 3 14 5 0 5 0 2C0 1 1 0 2 0\" />\r\n\t\t<path fill=\"var(--color-secondary-700)\" d=\"M2 3 22 3C24 3 25 4 25 6L25 16C25 18 24 19 22 19L3 19C1 19 0 18 0 16L0 6C0 4 1 3 3 3\" />\r\n\t</svg>\r\n</div>\r\n<p class=\"name\">{{ metadata.name }}</p>\r\n<p class=\"date\">{{ formatDate(metadata.updatedAt) }}</p>\r\n<p class=\"size\">{{ formatBytes(metadata.size) }}</p>\r\n@if (isBeingProcessed) {\r\n\t<div class=\"loading\">\r\n\t\t<loading-spinner></loading-spinner>\r\n\t</div>\r\n} @else {\r\n\t<div class=\"actions\">\r\n\t\t<svg (click)=\"rename($event)\" class=\"rename icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 -960 960 960\">\r\n\t\t\t<path\r\n\t\t\t\td=\"M200-200h57l391-391-57-57-391 391v57Zm-40 80q-17 0-28.5-11.5T120-160v-97q0-16 6-30.5t17-25.5l505-504q12-11 26.5-17t30.5-6q16 0 31 6t26 18l55 56q12 11 17.5 26t5.5 30q0 16-5.5 30.5T817-647L313-143q-11 11-25.5 17t-30.5 6h-97Zm600-584-56-56 56 56Zm-141 85-28-29 57 57-29-28Z\"\r\n\t\t\t/>\r\n\t\t</svg>\r\n\t\t<svg (click)=\"download($event)\" class=\"download icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 -960 960 960\">\r\n\t\t\t<path\r\n\t\t\t\td=\"M480-337q-8 0-15-2.5t-13-8.5L308-492q-12-12-11.5-28t11.5-28q12-12 28.5-12.5T365-549l75 75v-286q0-17 11.5-28.5T480-800q17 0 28.5 11.5T520-760v286l75-75q12-12 28.5-11.5T652-548q11 12 11.5 28T652-492L508-348q-6 6-13 8.5t-15 2.5ZM240-160q-33 0-56.5-23.5T160-240v-80q0-17 11.5-28.5T200-360q17 0 28.5 11.5T240-320v80h480v-80q0-17 11.5-28.5T760-360q17 0 28.5 11.5T800-320v80q0 33-23.5 56.5T720-160H240Z\"\r\n\t\t\t/>\r\n\t\t</svg>\r\n\t\t<svg (click)=\"delete($event)\" class=\"delete icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 -960 960 960\">\r\n\t\t\t<path\r\n\t\t\t\td=\"M280-120q-33 0-56.5-23.5T200-200v-520q-17 0-28.5-11.5T160-760q0-17 11.5-28.5T200-800h160q0-17 11.5-28.5T400-840h160q17 0 28.5 11.5T600-800h160q17 0 28.5 11.5T800-760q0 17-11.5 28.5T760-720v520q0 33-23.5 56.5T680-120H280Zm400-600H280v520h400v-520ZM400-280q17 0 28.5-11.5T440-320v-280q0-17-11.5-28.5T400-640q-17 0-28.5 11.5T360-600v280q0 17 11.5 28.5T400-280Zm160 0q17 0 28.5-11.5T600-320v-280q0-17-11.5-28.5T560-640q-17 0-28.5 11.5T520-600v280q0 17 11.5 28.5T560-280ZM280-720v520-520Z\"\r\n\t\t\t/>\r\n\t\t</svg>\r\n\t</div>\r\n}\r\n"
        },
        {
            "name": "DirectoryTreeComponent",
            "id": "component-DirectoryTreeComponent-7ba5b3bc0b6df850024685292dd7e311ee5e1832340ff94afe0af316592f6d69265d5f620a1a98d2de907c6236a9076b9dca4d279983e746fe143e799125445c",
            "file": "src/app/features/directory-tree/directory-tree.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "directory-tree",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./directory-tree.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "root",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Node",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "root$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Node>",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "store",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Store",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "tree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "tree$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCollapse",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onExpand",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLoadContent",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelect",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "PureDirectoryTreeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { Store } from '@ngxs/store';\r\nimport { filter, Observable } from 'rxjs';\r\nimport { PureDirectoryTreeComponent } from 'src/app/features/directory-tree/components/pure-directory-tree/pure-directory-tree.component';\r\nimport { DirectoryTreeActions } from 'src/app/features/directory-tree/state/directory-tree.actions';\r\nimport { Node } from 'src/app/features/directory-tree/state/directory-tree.state';\r\n\r\n@Component({\r\n\tstandalone: true,\r\n\tselector: 'directory-tree',\r\n\tstyleUrl: './directory-tree.component.css',\r\n\ttemplateUrl: './directory-tree.component.html',\r\n\timports: [PureDirectoryTreeComponent],\r\n})\r\nexport class DirectoryTreeComponent {\r\n\tprivate readonly store: Store;\r\n\r\n\tprivate readonly router: Router;\r\n\r\n\tprivate readonly route: ActivatedRoute;\r\n\r\n\tpublic root!: Node;\r\n\r\n\tpublic tree!: {\r\n\t\t[path: string]: Array<Node>;\r\n\t};\r\n\r\n\tpublic root$: Observable<Node>;\r\n\r\n\tpublic tree$: Observable<{\r\n\t\t[path: string]: Array<Node>;\r\n\t}>;\r\n\r\n\tpublic constructor(store: Store, router: Router, route: ActivatedRoute) {\r\n\t\tthis.store = store;\r\n\t\tthis.route = route;\r\n\t\tthis.router = router;\r\n\r\n\t\tthis.root$ = store.select((state) => state['directory_tree'].root);\r\n\t\tthis.tree$ = store.select((state) => state['directory_tree'].tree);\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\tthis.router.events.pipe(filter((event): event is NavigationEnd => event instanceof NavigationEnd)).subscribe(() => {\r\n\t\t\tconst path = '/' + decodeURI(this.route.snapshot.url.join('/'));\r\n\t\t\tthis.store.dispatch([new DirectoryTreeActions.FetchContent(path), new DirectoryTreeActions.Select(path)]);\r\n\t\t});\r\n\r\n\t\tthis.root$.subscribe((root) => (this.root = root));\r\n\t\tthis.tree$.subscribe((tree) => (this.tree = tree));\r\n\r\n\t\tthis.store.dispatch([\r\n\t\t\tnew DirectoryTreeActions.FetchContent(this.route.snapshot.url.join('/')),\r\n\t\t\tnew DirectoryTreeActions.Select(this.route.snapshot.url.join('/')),\r\n\t\t]);\r\n\t}\r\n\r\n\tpublic onExpand(path: string) {\r\n\t\tthis.store.dispatch(new DirectoryTreeActions.Expand(path));\r\n\t}\r\n\r\n\tpublic onCollapse(path: string) {\r\n\t\tthis.store.dispatch(new DirectoryTreeActions.Collapse(path));\r\n\t}\r\n\r\n\tpublic onLoadContent(path: string) {\r\n\t\tthis.store.dispatch(new DirectoryTreeActions.FetchContent(path));\r\n\t}\r\n\r\n\tpublic onSelect(path: string) {\r\n\t\tthis.store.dispatch(new DirectoryTreeActions.Open(path));\r\n\t}\r\n}\r\n",
            "styleUrl": "./directory-tree.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "modifierKind": [
                    125
                ],
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<!-- <pure-directory-tree (onCollapse)=\"onCollapse($event)\" (onExpand)=\"onExpand($event)\" (onClick)=\"onClick($event)\" [metadata]=\"metadata\"></pure-directory-tree> -->\r\n\r\n<pure-directory-tree\r\n\t(onCollapse)=\"onCollapse($event)\"\r\n\t(onExpand)=\"onExpand($event)\"\r\n\t(onLoadContent)=\"onLoadContent($event)\"\r\n\t(onSelect)=\"onSelect($event)\"\r\n\t[root]=\"root\"\r\n\t[tree]=\"tree\"\r\n></pure-directory-tree>\r\n"
        },
        {
            "name": "DirectoryTreeItemComponent",
            "id": "component-DirectoryTreeItemComponent-e76fd7956e42eaf14a0d56c4ef3366035a597844116c3f6cee59b15e4688328c3f96ef63a1612ac042f139d946884565029e1652a1f0b1276e3d11009a7cb6c3",
            "file": "src/app/features/directory-tree/components/pure-directory-tree/components/directory-tree-item/directory-tree-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "directory-tree-item",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./directory-tree-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isRoot",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "node",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 14,
                    "type": "Node",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "tree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 17,
                    "type": "literal type",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCollapse",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "onExpand",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "onLoadContent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "onSelect",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "hasChildren",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.has-children'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "isCollapsed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.is-collapsed'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.is-loading'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "isSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.is-selected'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "loadingSpinnerThickness",
                    "defaultValue": "Thickness.Thick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onArrowClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent | PointerEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent | PointerEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent | PointerEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent | PointerEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.has-children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.is-collapsed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.is-loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.is-selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent | PointerEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "LoadingSpinnerComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, HostBinding, HostListener, Input, Output } from '@angular/core';\r\nimport { Node } from 'src/app/features/directory-tree/state/directory-tree.state';\r\nimport { LoadingSpinnerComponent, Thickness } from 'src/app/shared/components/loading-spinner/loading-spinner.component';\r\n\r\n@Component({\r\n\tselector: 'directory-tree-item',\r\n\tstandalone: true,\r\n\ttemplateUrl: './directory-tree-item.component.html',\r\n\tstyleUrl: './directory-tree-item.component.css',\r\n\timports: [LoadingSpinnerComponent],\r\n})\r\nexport class DirectoryTreeItemComponent {\r\n\t@Input({ required: true })\r\n\tpublic node!: Node;\r\n\r\n\t@Input({ required: true })\r\n\tpublic tree!: {\r\n\t\t[path: string]: Array<Node>;\r\n\t};\r\n\r\n\t@Input()\r\n\tpublic isRoot: boolean = false;\r\n\r\n\t@HostBinding('class.is-collapsed')\r\n\tpublic isCollapsed!: boolean;\r\n\r\n\t@HostBinding('class.has-children')\r\n\tpublic hasChildren!: boolean;\r\n\r\n\t@HostBinding('class.is-loading')\r\n\tpublic isLoading!: boolean;\r\n\r\n\t@HostBinding('class.is-selected')\r\n\tpublic isSelected!: boolean;\r\n\r\n\t@Output()\r\n\tpublic onLoadContent: EventEmitter<string> = new EventEmitter();\r\n\r\n\t@Output()\r\n\tpublic onCollapse: EventEmitter<string> = new EventEmitter();\r\n\r\n\t@Output()\r\n\tpublic onExpand: EventEmitter<string> = new EventEmitter();\r\n\r\n\t@Output()\r\n\tpublic onSelect: EventEmitter<string> = new EventEmitter();\r\n\r\n\tpublic loadingSpinnerThickness = Thickness.Thick;\r\n\r\n\tngOnInit() {\r\n\t\tthis.isCollapsed = this.node.isCollapsed;\r\n\t\tthis.hasChildren = this.node.hasChildren;\r\n\t\tthis.isSelected = this.node.isSelected;\r\n\r\n\t\tthis.isLoading = this.hasChildren && !this.tree[this.node.path];\r\n\t}\r\n\r\n\tngOnChanges() {\r\n\t\tthis.isCollapsed = this.node.isCollapsed;\r\n\t\tthis.hasChildren = this.node.hasChildren;\r\n\t\tthis.isSelected = this.node.isSelected;\r\n\r\n\t\tthis.isLoading = this.hasChildren && !this.tree[this.node.path];\r\n\t}\r\n\r\n\tpublic onArrowClick(event: MouseEvent | PointerEvent) {\r\n\t\tevent.stopPropagation();\r\n\r\n\t\tif (this.isLoading) {\r\n\t\t\tthis.onLoadContent.emit(this.node.path);\r\n\t\t}\r\n\r\n\t\tif (this.isCollapsed) {\r\n\t\t\tthis.onExpand.emit(this.node.path);\r\n\t\t} else {\r\n\t\t\tthis.onCollapse.emit(this.node.path);\r\n\t\t}\r\n\t}\r\n\r\n\t@HostListener('click', ['$event'])\r\n\tprivate onClick(event: MouseEvent | PointerEvent) {\r\n\t\tif (this.isRoot) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tevent.stopPropagation();\r\n\r\n\t\tthis.onSelect.emit(this.node.path);\r\n\t}\r\n}\r\n",
            "styleUrl": "./directory-tree-item.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "@if (isRoot) {\r\n\t@if (!node.isCollapsed) {\r\n\t\t@if (isLoading) {\r\n\t\t\t<div class=\"loading-item\">\r\n\t\t\t\t<loading-spinner [thickness]=\"loadingSpinnerThickness\"></loading-spinner>\r\n\t\t\t\t<p class=\"text\">Loading</p>\r\n\t\t\t</div>\r\n\t\t}\r\n\t\t@for (child of tree[node.path]; track child.id) {\r\n\t\t\t<directory-tree-item\r\n\t\t\t\t(onCollapse)=\"onCollapse.emit($event)\"\r\n\t\t\t\t(onExpand)=\"onExpand.emit($event)\"\r\n\t\t\t\t(onLoadContent)=\"onLoadContent.emit($event)\"\r\n\t\t\t\t(onSelect)=\"onSelect.emit($event)\"\r\n\t\t\t\t[node]=\"child\"\r\n\t\t\t\t[tree]=\"tree\"\r\n\t\t\t></directory-tree-item>\r\n\t\t}\r\n\t}\r\n} @else {\r\n\t<header>\r\n\t\t<div class=\"arrow\" (click)=\"onArrowClick($event)\">\r\n\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 -960 960 960\">\r\n\t\t\t\t<path\r\n\t\t\t\t\td=\"M 480 -321 q -8 0 -15 -2.5 t -13 -8.5 L 268 -516 q -11 -11 -11 -28 t 11 -28 q 11 -11 28 -11 t 28 11 l 156 156 l 156 -156 q 11 -11 28 -11 t 28 11 q 11 11 11 28 t -11 28 L 508 -332 q -6 6 -13 8.5 t -15 2.5 Z\"\r\n\t\t\t\t/>\r\n\t\t\t</svg>\r\n\t\t</div>\r\n\t\t<div class=\"icon\">\r\n\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 25 19\">\r\n\t\t\t\t<path fill=\"rgb(255, 160, 0)\" d=\"M2 0 10 0 14 3 14 5 0 5 0 2C0 1 1 0 2 0\" />\r\n\t\t\t\t<path fill=\"rgb(255, 202, 40)\" d=\"M2 3 22 3C24 3 25 4 25 6L25 16C25 18 24 19 22 19L3 19C1 19 0 18 0 16L0 6C0 4 1 3 3 3\" />\r\n\t\t\t</svg>\r\n\t\t</div>\r\n\t\t<p class=\"name\">\r\n\t\t\t{{ node.name }}\r\n\t\t</p>\r\n\t</header>\r\n\t<main>\r\n\t\t@if (!node.isCollapsed) {\r\n\t\t\t@if (isLoading) {\r\n\t\t\t\t<div class=\"loading-item\">\r\n\t\t\t\t\t<loading-spinner [thickness]=\"loadingSpinnerThickness\"></loading-spinner>\r\n\t\t\t\t\t<p class=\"text\">Loading</p>\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t@for (child of tree[node.path]; track child.id) {\r\n\t\t\t\t<directory-tree-item\r\n\t\t\t\t\t(onCollapse)=\"onCollapse.emit($event)\"\r\n\t\t\t\t\t(onExpand)=\"onExpand.emit($event)\"\r\n\t\t\t\t\t(onLoadContent)=\"onLoadContent.emit($event)\"\r\n\t\t\t\t\t(onSelect)=\"onSelect.emit($event)\"\r\n\t\t\t\t\t[node]=\"child\"\r\n\t\t\t\t\t[tree]=\"tree\"\r\n\t\t\t\t></directory-tree-item>\r\n\t\t\t}\r\n\t\t}\r\n\t</main>\r\n}\r\n"
        },
        {
            "name": "ExpandingMenuButtonComponent",
            "id": "component-ExpandingMenuButtonComponent-de750fc079d4de7642911727814f0491657844d1158c6b44a6ee12900bbae3d0d4f0a3c1adf067cbf77e6925da2f25aa369c91cbf97b7d00add04189ed1837a3",
            "file": "src/app/shared/components/expanding-menu-button/expanding-menu-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "expanding-menu-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./expanding-menu-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "direction",
                    "defaultValue": "Direction.Down",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 452,
                            "end": 473,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 351,
                            "tagName": {
                                "pos": 453,
                                "end": 457,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "type"
                            },
                            "comment": "",
                            "typeExpression": {
                                "pos": 458,
                                "end": 469,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 316,
                                "type": {
                                    "pos": 459,
                                    "end": 468,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 183,
                                    "typeName": {
                                        "pos": 459,
                                        "end": 468,
                                        "flags": 16777216,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 80,
                                        "escapedText": "Direction"
                                    }
                                }
                            }
                        }
                    ],
                    "rawdescription": "\n\nThe direction to which the menu will expand.\n",
                    "description": "<p>The direction to which the menu will expand.</p>\n",
                    "line": 22,
                    "type": "Direction",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input } from '@angular/core';\r\n\r\nexport enum Direction {\r\n\tUp = 'up',\r\n\tDown = 'down',\r\n\tLeft = 'left',\r\n\tRight = 'right',\r\n}\r\n\r\n@Component({\r\n\tselector: 'expanding-menu-button',\r\n\tstandalone: true,\r\n\ttemplateUrl: './expanding-menu-button.component.html',\r\n\tstyleUrl: './expanding-menu-button.component.css',\r\n})\r\nexport class ExpandingMenuButtonComponent {\r\n\t/**\r\n\t * The direction to which the menu will expand.\r\n\t * @type {Direction}\r\n\t */\r\n\t@Input()\r\n\tpublic direction: Direction = Direction.Down;\r\n\r\n\t@HostBinding('class')\r\n\tget classList(): string {\r\n\t\treturn this.direction.toString();\r\n\t}\r\n}\r\n",
            "styleUrl": "./expanding-menu-button.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classList": {
                    "name": "classList",
                    "getSignature": {
                        "name": "classList",
                        "type": "string",
                        "returnType": "string",
                        "line": 25
                    }
                }
            },
            "templateData": "<div class=\"wrapper\">\r\n    <div class=\"items\">\r\n        <ng-content></ng-content>\r\n    </div>\r\n    <div class=\"plus\">\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 -960 960 960\" width=\"24\">\r\n            <path fill=\"white\" d=\"M440-440H240q-17 0-28.5-11.5T200-480q0-17 11.5-28.5T240-520h200v-200q0-17 11.5-28.5T480-760q17 0 28.5 11.5T520-720v200h200q17 0 28.5 11.5T760-480q0 17-11.5 28.5T720-440H520v200q0 17-11.5 28.5T480-200q-17 0-28.5-11.5T440-240v-200Z\"/>\r\n        </svg>\r\n    </div>\r\n</div>"
        },
        {
            "name": "ExplorerComponent",
            "id": "component-ExplorerComponent-2a41f65a6b3601c2dc0695fade810110b4557e98d6cf8778fef81d31fbbaf18498124c6c513de36bb722362bccca07d6c5ac89fa391d944a6cc2b6341b5b0e9b",
            "file": "src/app/core/components/explorer/explorer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "explorer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./explorer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "DirectoryTreeComponent",
                    "type": "component"
                },
                {
                    "name": "ContentListComponent",
                    "type": "component"
                },
                {
                    "name": "BreadcrumbsComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { BreadcrumbsComponent } from 'src/app/features/breadcrumbs/breadcrumbs.component';\r\nimport { ContentListComponent } from 'src/app/features/content-list/content-list.component';\r\nimport { DirectoryTreeComponent } from 'src/app/features/directory-tree/directory-tree.component';\r\n\r\n@Component({\r\n\tstandalone: true,\r\n\tselector: 'explorer',\r\n\ttemplateUrl: './explorer.component.html',\r\n\tstyleUrl: './explorer.component.css',\r\n\timports: [DirectoryTreeComponent, ContentListComponent, BreadcrumbsComponent],\r\n})\r\nexport class ExplorerComponent {}\r\n",
            "styleUrl": "./explorer.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<header>\r\n\t<breadcrumbs></breadcrumbs>\r\n</header>\r\n<main>\r\n\t<directory-tree></directory-tree>\r\n\t<content-list></content-list>\r\n</main>\r\n"
        },
        {
            "name": "FileListItemComponent",
            "id": "component-FileListItemComponent-87df1a2ac5539894db7bef8e1955dd6eea12777ddecbb2316dc5d9658b7ede7aeae28e177920c7805f9f82e1dba2cd1f770296292ed0cc3c5fe23b773efbfd3e",
            "file": "src/app/shared/components/file-list-item/file-list-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "file-list-item",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./file-list-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isSelected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 16,
                    "type": "DirectoryContentFile",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "download",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatBytes",
                    "args": [
                        {
                            "name": "bytes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "decimals",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "bytes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "decimals",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatDate",
                    "args": [
                        {
                            "name": "dateOrString",
                            "type": "Date | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dateOrString",
                            "type": "Date | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rename",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "select",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "unselect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input } from '@angular/core';\r\nimport { DirectoryContentFile } from 'generated';\r\nimport { IDeletable } from 'src/app/shared/models/IDeletable';\r\nimport { IDownloadable } from 'src/app/shared/models/IDownloadable';\r\nimport { IRenamable } from 'src/app/shared/models/IRenamable';\r\nimport { ISelectable } from 'src/app/shared/models/ISelectable';\r\n\r\n@Component({\r\n\tselector: 'file-list-item',\r\n\tstandalone: true,\r\n\ttemplateUrl: './file-list-item.component.html',\r\n\tstyleUrl: './file-list-item.component.css',\r\n})\r\nexport class FileListItemComponent implements ISelectable, IDownloadable, IRenamable, IDeletable {\r\n\t@Input({ required: true })\r\n\tpublic metadata!: DirectoryContentFile;\r\n\r\n\t@HostBinding('class.selected')\r\n\t@Input('isSelected')\r\n\tpublic isSelected: boolean = false;\r\n\r\n\tselect(): void {\r\n\t\tthis.isSelected = true;\r\n\t}\r\n\r\n\tunselect(): void {\r\n\t\tthis.isSelected = false;\r\n\t}\r\n\r\n\tpublic rename(event?: Event): void {\r\n\t\tevent?.preventDefault();\r\n\t}\r\n\r\n\tpublic delete(event?: Event): void {\r\n\t\tevent?.preventDefault();\r\n\t}\r\n\r\n\tpublic download(event?: Event): void {\r\n\t\tevent?.preventDefault();\r\n\t}\r\n\r\n\tprotected formatBytes(bytes: number, decimals: number = 2): string {\r\n\t\tif (!+bytes) return '0 B';\r\n\r\n\t\tconst k = 1024;\r\n\t\tconst dm = decimals < 0 ? 0 : decimals;\r\n\t\tconst sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\r\n\r\n\t\tconst i = Math.floor(Math.log(bytes) / Math.log(k));\r\n\r\n\t\treturn `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;\r\n\t}\r\n\r\n\tprotected formatDate(dateOrString: Date | string): string {\r\n\t\tconst date = dateOrString instanceof Date ? dateOrString : new Date(Date.parse(dateOrString));\r\n\r\n\t\tconst day = date.toLocaleDateString('de-DE', { day: 'numeric' });\r\n\t\tconst month = date.toLocaleDateString('de-DE', { month: 'short' });\r\n\t\tconst year = date.toLocaleDateString('de-DE', { year: '2-digit' });\r\n\r\n\t\treturn `${day} ${month} ${year}`;\r\n\t}\r\n}\r\n",
            "styleUrl": "./file-list-item.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "ISelectable",
                "IDownloadable",
                "IRenamable",
                "IDeletable"
            ],
            "templateData": "<div class=\"icon\">\r\n    <svg class=\"folder-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 19 22\">\r\n        <path fill=\"rgb(57, 97, 237)\" d=\"M2 0 11 0 11 1 18 8 19 8 19 18C19 20 17 22 15 22L4 22C2 22 0 20 0 18L0 4C0 2 2 0 4 0\"></path>\r\n        <path fill=\"rgb(106,136,242)\" d=\"M11 0 19 8 13 8C12 8 11 7 11 6Z\"></path>\r\n    </svg>\r\n</div>\r\n<p class=\"name\">{{metadata.name}}</p>\r\n<p class=\"date\">{{formatDate(metadata.updatedAt)}}</p>\r\n<p class=\"mime-type\">{{metadata.mimeType}}</p>\r\n<p class=\"size\">{{formatBytes(metadata.size)}}</p>\r\n<div class=\"actions\">\r\n        <svg (click)=\"rename($event)\" class=\"rename icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 -960 960 960\">\r\n            <path d=\"M200-200h57l391-391-57-57-391 391v57Zm-40 80q-17 0-28.5-11.5T120-160v-97q0-16 6-30.5t17-25.5l505-504q12-11 26.5-17t30.5-6q16 0 31 6t26 18l55 56q12 11 17.5 26t5.5 30q0 16-5.5 30.5T817-647L313-143q-11 11-25.5 17t-30.5 6h-97Zm600-584-56-56 56 56Zm-141 85-28-29 57 57-29-28Z\"/>\r\n        </svg>\r\n        <svg (click)=\"download($event)\" class=\"download icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 -960 960 960\">\r\n            <path d=\"M480-337q-8 0-15-2.5t-13-8.5L308-492q-12-12-11.5-28t11.5-28q12-12 28.5-12.5T365-549l75 75v-286q0-17 11.5-28.5T480-800q17 0 28.5 11.5T520-760v286l75-75q12-12 28.5-11.5T652-548q11 12 11.5 28T652-492L508-348q-6 6-13 8.5t-15 2.5ZM240-160q-33 0-56.5-23.5T160-240v-80q0-17 11.5-28.5T200-360q17 0 28.5 11.5T240-320v80h480v-80q0-17 11.5-28.5T760-360q17 0 28.5 11.5T800-320v80q0 33-23.5 56.5T720-160H240Z\"/>\r\n        </svg>\r\n        <svg (click)=\"delete($event)\" class=\"delete icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 -960 960 960\">\r\n            <path d=\"M280-120q-33 0-56.5-23.5T200-200v-520q-17 0-28.5-11.5T160-760q0-17 11.5-28.5T200-800h160q0-17 11.5-28.5T400-840h160q17 0 28.5 11.5T600-800h160q17 0 28.5 11.5T800-760q0 17-11.5 28.5T760-720v520q0 33-23.5 56.5T680-120H280Zm400-600H280v520h400v-520ZM400-280q17 0 28.5-11.5T440-320v-280q0-17-11.5-28.5T400-640q-17 0-28.5 11.5T360-600v280q0 17 11.5 28.5T400-280Zm160 0q17 0 28.5-11.5T600-320v-280q0-17-11.5-28.5T560-640q-17 0-28.5 11.5T520-600v280q0 17 11.5 28.5T560-280ZM280-720v520-520Z\"/>\r\n        </svg>\r\n    <!-- <svg class=\"icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 -960 960 960\"><path d=\"M240-400q-33 0-56.5-23.5T160-480q0-33 23.5-56.5T240-560q33 0 56.5 23.5T320-480q0 33-23.5 56.5T240-400Zm240 0q-33 0-56.5-23.5T400-480q0-33 23.5-56.5T480-560q33 0 56.5 23.5T560-480q0 33-23.5 56.5T480-400Zm240 0q-33 0-56.5-23.5T640-480q0-33 23.5-56.5T720-560q33 0 56.5 23.5T800-480q0 33-23.5 56.5T720-400Z\"/></svg> -->\r\n</div>"
        },
        {
            "name": "LoadingSpinnerComponent",
            "id": "component-LoadingSpinnerComponent-05f06a26a695d352dffd7632c7ff09d770115014faa3e64fdbc01d70cdf754a48057d5f65248f89c4c16e8d2d1981a7aa692b19e2796c7d58c5541e9505f89bd",
            "file": "src/app/shared/components/loading-spinner/loading-spinner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "loading-spinner",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./loading-spinner.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "thickness",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 716,
                            "end": 737,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 351,
                            "tagName": {
                                "pos": 717,
                                "end": 721,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "type"
                            },
                            "comment": "",
                            "typeExpression": {
                                "pos": 722,
                                "end": 733,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 316,
                                "type": {
                                    "pos": 723,
                                    "end": 732,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 183,
                                    "typeName": {
                                        "pos": 723,
                                        "end": 732,
                                        "flags": 16777216,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 80,
                                        "escapedText": "Thickness"
                                    }
                                }
                            }
                        }
                    ],
                    "rawdescription": "\n\nThe thickness of the spinner.\n",
                    "description": "<p>The thickness of the spinner.</p>\n",
                    "line": 34,
                    "type": "Thickness",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 826,
                            "end": 842,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 351,
                            "tagName": {
                                "pos": 827,
                                "end": 831,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "type"
                            },
                            "comment": "",
                            "typeExpression": {
                                "pos": 832,
                                "end": 838,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 316,
                                "type": {
                                    "pos": 833,
                                    "end": 837,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 183,
                                    "typeName": {
                                        "pos": 833,
                                        "end": 837,
                                        "flags": 16777216,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 80,
                                        "escapedText": "Type"
                                    }
                                }
                            }
                        }
                    ],
                    "rawdescription": "\n\nThe type of the spinner.\n",
                    "description": "<p>The type of the spinner.</p>\n",
                    "line": 41,
                    "type": "Type",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "hostRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "optional": false,
                    "description": "<p>Reference to the host element.</p>\n",
                    "line": 47,
                    "rawdescription": "\n\nReference to the host element.\n",
                    "modifierKind": [
                        123,
                        148
                    ],
                    "jsdoctags": [
                        {
                            "pos": 927,
                            "end": 965,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 351,
                            "tagName": {
                                "pos": 928,
                                "end": 932,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "type"
                            },
                            "comment": "",
                            "typeExpression": {
                                "pos": 933,
                                "end": 961,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 316,
                                "type": {
                                    "pos": 934,
                                    "end": 960,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 183,
                                    "typeName": {
                                        "pos": 934,
                                        "end": 944,
                                        "flags": 16777216,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 80,
                                        "escapedText": "ElementRef"
                                    },
                                    "typeArguments": [
                                        {
                                            "pos": 945,
                                            "end": 959,
                                            "flags": 16777216,
                                            "modifierFlagsCache": 0,
                                            "transformFlags": 1,
                                            "kind": 183,
                                            "typeName": {
                                                "pos": 945,
                                                "end": 959,
                                                "flags": 16777216,
                                                "modifierFlagsCache": 0,
                                                "transformFlags": 0,
                                                "kind": 80,
                                                "escapedText": "HTMLDivElement"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "apply",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "applyDefaults",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "applyThickness",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalculate the thickness, format for CSS and assign to host binding.\n",
                    "description": "<p>Calculate the thickness, format for CSS and assign to host binding.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "calculateThickness",
                    "args": [
                        {
                            "name": "width",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalculate the thickness of the spinner based off its computed width.\n\n",
                    "description": "<p>Calculate the thickness of the spinner based off its computed width.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2061,
                                "end": 2066,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "width"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2044,
                                "end": 2049,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the width of the component</p>\n",
                            "typeExpression": {
                                "pos": 2052,
                                "end": 2060,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 316,
                                "type": {
                                    "pos": 2053,
                                    "end": 2059,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 150
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 2100,
                                "end": 2107,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>the calculated thickness</p>\n",
                            "returnType": "number"
                        }
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "onResize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81
                }
            ],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, HostBinding, HostListener, Input } from '@angular/core';\r\n\r\nexport enum Type {\r\n\tMinimalistic = 'minimalistic',\r\n\tRounded = 'rounded',\r\n}\r\n\r\nexport enum Thickness {\r\n\tUltraThick = 'ultra-thick',\r\n\tThick = 'thick',\r\n\tRegular = 'regular',\r\n\tThin = 'thin',\r\n}\r\n\r\nconst ThicknessMap: Record<Thickness, number> = {\r\n\t[Thickness.UltraThick]: 0.24,\r\n\t[Thickness.Thick]: 0.18,\r\n\t[Thickness.Regular]: 0.09,\r\n\t[Thickness.Thin]: 0.045,\r\n};\r\n\r\n@Component({\r\n\tselector: 'loading-spinner',\r\n\tstandalone: true,\r\n\ttemplateUrl: './loading-spinner.component.html',\r\n\tstyleUrl: './loading-spinner.component.css',\r\n})\r\nexport class LoadingSpinnerComponent {\r\n\t/**\r\n\t * The thickness of the spinner.\r\n\t * @type {Thickness}\r\n\t */\r\n\t@Input()\r\n\tpublic thickness!: Thickness;\r\n\r\n\t/**\r\n\t * The type of the spinner.\r\n\t * @type {Type}\r\n\t */\r\n\t@Input()\r\n\tpublic type!: Type;\r\n\r\n\t/**\r\n\t * Reference to the host element.\r\n\t * @type {ElementRef<HTMLDivElement>}\r\n\t */\r\n\tprivate readonly hostRef: ElementRef<HTMLDivElement>;\r\n\r\n\t/**\r\n\t * Creates a new LoadingSpinnerComponent instance.\r\n\t * @constructor\r\n\t *\r\n\t * @param   {ElementRef}              hostRef the entityManager\r\n\t * @returns {LoadingSpinnerComponent}         the LoadingSpinnerComponent instance\r\n\t */\r\n\tpublic constructor(hostRef: ElementRef) {\r\n\t\tthis.hostRef = hostRef;\r\n\t}\r\n\r\n\tpublic apply() {\r\n\t\tthis.applyDefaults();\r\n\t\tthis.applyThickness();\r\n\t}\r\n\r\n\tpublic ngAfterContentInit() {\r\n\t\tthis.apply();\r\n\r\n\t\tnew ResizeObserver(() => this.applyThickness()).observe(this.hostRef.nativeElement);\r\n\t}\r\n\r\n\tpublic ngOnChanges() {\r\n\t\tthis.apply();\r\n\t}\r\n\r\n\t@HostBinding('class')\r\n\tget classList(): string {\r\n\t\treturn `${this.thickness.toString()} ${this.type.toString()}`;\r\n\t}\r\n\r\n\t@HostListener('window:resize')\r\n\tpublic onResize() {\r\n\t\tthis.applyThickness();\r\n\t}\r\n\r\n\tprivate applyDefaults() {\r\n\t\tthis.thickness = this.thickness || Thickness.Thick;\r\n\t\tthis.type = this.type || Type.Rounded;\r\n\t}\r\n\r\n\t/**\r\n\t * Calculate the thickness of the spinner based off its computed width.\r\n\t *\r\n\t * @param   {number} width the width of the component\r\n\t * @returns {number}       the calculated thickness\r\n\t */\r\n\tprivate calculateThickness(width: number) {\r\n\t\treturn Math.round(width * ThicknessMap[this.thickness]);\r\n\t}\r\n\r\n\t/**\r\n\t * Calculate the thickness, format for CSS and assign to host binding.\r\n\t */\r\n\tprivate applyThickness() {\r\n\t\tlet calculatedThickness = `${this.calculateThickness(this.hostRef.nativeElement.clientWidth)}px`;\r\n\r\n\t\tthis.hostRef.nativeElement.style.setProperty('--thickness', calculatedThickness);\r\n\t}\r\n}\r\n",
            "styleUrl": "./loading-spinner.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Creates a new LoadingSpinnerComponent instance.</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "hostRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "rawdescription": "\n\nCreates a new LoadingSpinnerComponent instance.\n\n",
                "modifierKind": [
                    125
                ],
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1148,
                            "end": 1155,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "hostRef"
                        },
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1114,
                            "end": 1119,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>the entityManager</p>\n",
                        "typeExpression": {
                            "pos": 1122,
                            "end": 1134,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 316,
                            "type": {
                                "pos": 1123,
                                "end": 1133,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 1,
                                "kind": 183,
                                "typeName": {
                                    "pos": 1123,
                                    "end": 1133,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 80,
                                    "escapedText": "ElementRef"
                                }
                            }
                        }
                    },
                    {
                        "tagName": {
                            "pos": 1180,
                            "end": 1187,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>the LoadingSpinnerComponent instance</p>\n",
                        "returnType": ""
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "classList": {
                    "name": "classList",
                    "getSignature": {
                        "name": "classList",
                        "type": "string",
                        "returnType": "string",
                        "line": 76
                    }
                }
            },
            "templateData": "<div class=\"wrapper\" (resize)=\"onResize()\">\r\n\t<div class=\"loading-spinner\"></div>\r\n</div>\r\n"
        },
        {
            "name": "NameableDirectoryItemComponent",
            "id": "component-NameableDirectoryItemComponent-0d1848faf22ec178ec9e15ea98ed2b1693008d5636edb7e62fdacde5130b62d185c86374c2c16545d5dcc18f947a12330fdee53d89ad197856923bc17731efbe",
            "file": "src/app/shared/components/nameable-directory-item/nameable-directory-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "nameable-directory-item",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./nameable-directory-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onDestroy",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "onSuccess",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "isNameInvalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.is-invalid'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "ref",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "regExp",
                    "defaultValue": "/^([-_.]?[a-zA-Z-0-9\\u00c4\\u00e4\\u00d6\\u00f6\\u00dc\\u00fc\\u00df])([-_. ]?[a-zA-Z-0-9\\u00c4\\u00e4\\u00d6\\u00f6\\u00dc\\u00fc\\u00df])*$/m",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clickOut",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isNameValid",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.is-invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40
                }
            ],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, HostBinding, HostListener, Output, ViewChild } from '@angular/core';\r\n\r\n@Component({\r\n\tstandalone: true,\r\n\tselector: 'nameable-directory-item',\r\n\ttemplateUrl: './nameable-directory-item.component.html',\r\n\tstyleUrl: './nameable-directory-item.component.css',\r\n})\r\nexport class NameableDirectoryItemComponent {\r\n\tprivate readonly regExp =\r\n\t\t/^([-_.]?[a-zA-Z-0-9\\u00c4\\u00e4\\u00d6\\u00f6\\u00dc\\u00fc\\u00df])([-_. ]?[a-zA-Z-0-9\\u00c4\\u00e4\\u00d6\\u00f6\\u00dc\\u00fc\\u00df])*$/m;\r\n\r\n\tprivate readonly ref: ElementRef;\r\n\r\n\t@ViewChild('input')\r\n\tpublic input!: ElementRef<HTMLInputElement>;\r\n\r\n\t@HostBinding('class.is-invalid')\r\n\tpublic isNameInvalid: boolean = false;\r\n\r\n\t@Output()\r\n\tpublic onSuccess: EventEmitter<string> = new EventEmitter();\r\n\r\n\t@Output()\r\n\tpublic onDestroy: EventEmitter<string> = new EventEmitter();\r\n\r\n\tpublic constructor(ref: ElementRef) {\r\n\t\tthis.ref = ref;\r\n\t}\r\n\r\n\tngAfterViewInit() {\r\n\t\tthis.focus();\r\n\r\n\t\tthis.input.nativeElement.addEventListener('input', () => (this.isNameInvalid = !this.isNameValid()));\r\n\r\n\t\tthis.input.nativeElement.addEventListener('change', () => this.onSubmit());\r\n\t}\r\n\r\n\t@HostListener('document:click', ['$event'])\r\n\tpublic clickOut(event: Event) {\r\n\t\tif (!this.ref.nativeElement.contains(event.target)) {\r\n\t\t\tif (this.input.nativeElement.value === '') {\r\n\t\t\t\treturn this.onDestroy.emit();\r\n\t\t\t}\r\n\r\n\t\t\tthis.onSubmit();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate onSubmit() {\r\n\t\tif (!this.isNameValid()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.onSuccess.emit(this.input.nativeElement.value);\r\n\t}\r\n\r\n\tprivate isNameValid() {\r\n\t\treturn this.regExp.test(this.input.nativeElement.value);\r\n\t}\r\n\r\n\tprivate focus() {\r\n\t\tthis.input.nativeElement.focus();\r\n\t}\r\n}\r\n",
            "styleUrl": "./nameable-directory-item.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ref",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "modifierKind": [
                    125
                ],
                "jsdoctags": [
                    {
                        "name": "ref",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"icon\">\r\n\t<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 25 19\">\r\n\t\t<path fill=\"var(--color-secondary-400)\" d=\"M2 0 10 0 14 3 14 5 0 5 0 2C0 1 1 0 2 0\" />\r\n\t\t<path fill=\"var(--color-secondary-700)\" d=\"M2 3 22 3C24 3 25 4 25 6L25 16C25 18 24 19 22 19L3 19C1 19 0 18 0 16L0 6C0 4 1 3 3 3\" />\r\n\t</svg>\r\n</div>\r\n<input #input placeholder=\"Neuer Ordner\" spellcheck=\"false\" />\r\n"
        },
        {
            "name": "PureBreadcrumbsComponent",
            "id": "component-PureBreadcrumbsComponent-962c95370496a0275abd53cb1c8bef1a8499a792ef4a4567ac23b79709d8ddce12a1f9c0119de644629dc96935d3a416414abe191cc6148d2098d7e55bb00ba5",
            "file": "src/app/features/breadcrumbs/components/pure-breadcrumbs/pure-breadcrumbs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pure-breadcrumbs",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./pure-breadcrumbs.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "crumbs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Array<string>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n\tstandalone: true,\r\n\tselector: 'pure-breadcrumbs',\r\n\tstyleUrl: './pure-breadcrumbs.component.css',\r\n\ttemplateUrl: './pure-breadcrumbs.component.html',\r\n})\r\nexport class PureBreadcrumbsComponent {\r\n\t@Input()\r\n\tpublic crumbs: Array<string> = [];\r\n\r\n\t@Output()\r\n\tpublic onClick: EventEmitter<number> = new EventEmitter();\r\n}\r\n",
            "styleUrl": "./pure-breadcrumbs.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<svg class=\"home\" (click)=\"onClick.emit(0)\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 -960 960 960\">\r\n\t<path\r\n\t\td=\"M240-200h120v-200q0-17 11.5-28.5T400-440h160q17 0 28.5 11.5T600-400v200h120v-360L480-740 240-560v360Zm-80 0v-360q0-19 8.5-36t23.5-28l240-180q21-16 48-16t48 16l240 180q15 11 23.5 28t8.5 36v360q0 33-23.5 56.5T720-120H560q-17 0-28.5-11.5T520-160v-200h-80v200q0 17-11.5 28.5T400-120H240q-33 0-56.5-23.5T160-200Zm320-270Z\"\r\n\t/>\r\n</svg>\r\n@for (crumb of crumbs; track crumb) {\r\n\t<svg class=\"arrow\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 -960 960 960\">\r\n\t\t<path\r\n\t\t\td=\"M480-361q-8 0-15-2.5t-13-8.5L268-556q-11-11-11-28t11-28q11-11 28-11t28 11l156 156 156-156q11-11 28-11t28 11q11 11 11 28t-11 28L508-372q-6 6-13 8.5t-15 2.5Z\"\r\n\t\t/>\r\n\t</svg>\r\n\t<p class=\"crumb\" (click)=\"onClick.emit($index + 1)\">{{ crumb }}</p>\r\n}\r\n"
        },
        {
            "name": "PureContentListComponent",
            "id": "component-PureContentListComponent-40841257dd3764ee91efad1c06f0854ff0799ab42b5747aab5f81be305b97dbd1db9f880124e547ab13a6c6edf7092bd95def4914c843409f0b7a06d8c58fce3",
            "file": "src/app/features/content-list/components/pure-content-list/pure-content-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pure-content-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./pure-content-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 53,
                    "type": "Array<ContentType>",
                    "decorators": []
                },
                {
                    "name": "displayNameableDirectoryItem",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "isInSelectMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 50,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCancelCreation",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onClickOutside",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onCreate",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "onDelete",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "EventEmitter<ListItemDeleteEvent>"
                },
                {
                    "name": "onOpen",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter<ListItemOpenEvent>"
                },
                {
                    "name": "onPlusClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onSelect",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter<ListItemSelectEvent>"
                },
                {
                    "name": "onSelectAll",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onUnselect",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "EventEmitter<ListItemUnselectEvent>"
                },
                {
                    "name": "onUnselectAll",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "expandingMenuButtonDirection",
                    "defaultValue": "Direction.Up",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "ref",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clickOut",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isFile",
                    "args": [
                        {
                            "name": "content",
                            "type": "ContentType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "File",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "ContentType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "SelectableDirectoryListItemComponent",
                    "type": "component"
                },
                {
                    "name": "SelectableFileListItemComponent",
                    "type": "component"
                },
                {
                    "name": "ExpandingMenuButtonComponent",
                    "type": "component"
                },
                {
                    "name": "NameableDirectoryItemComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output } from '@angular/core';\r\nimport { DirectoryContentDirectory, DirectoryContentFile } from 'generated';\r\nimport { SelectableFileListItemComponent } from 'src/app/features/content-list/components/pure-content-list/components/selectable-file-list-item/selectable-file-list-item.component';\r\nimport { Direction, ExpandingMenuButtonComponent } from 'src/app/shared/components/expanding-menu-button/expanding-menu-button.component';\r\nimport { NameableDirectoryItemComponent } from '../../../../shared/components/nameable-directory-item/nameable-directory-item.component';\r\nimport {\r\n\tListItemDeleteEvent,\r\n\tListItemOpenEvent,\r\n\tListItemSelectEvent,\r\n\tListItemUnselectEvent,\r\n\tSelectableDirectoryListItemComponent,\r\n} from './components/selectable-directory-list-item/selectable-directory-list-item.component';\r\n\r\nexport enum Type {\r\n\tDirectory,\r\n\tFile,\r\n}\r\n\r\nexport type Directory = DirectoryContentDirectory & {\r\n\ttype: Type.Directory;\r\n\tid: number;\r\n\tisSelected: boolean;\r\n\tisBeingProcessed: boolean;\r\n\tisHighlighted: boolean;\r\n};\r\n\r\nexport type File = DirectoryContentFile & {\r\n\ttype: Type.File;\r\n\tid: number;\r\n\tisSelected: boolean;\r\n\tisBeingProcessed: boolean;\r\n};\r\n\r\nexport type ContentType = File | Directory;\r\n\r\n@Component({\r\n\tselector: 'pure-content-list',\r\n\tstandalone: true,\r\n\ttemplateUrl: './pure-content-list.component.html',\r\n\tstyleUrl: './pure-content-list.component.css',\r\n\timports: [SelectableDirectoryListItemComponent, SelectableFileListItemComponent, ExpandingMenuButtonComponent, NameableDirectoryItemComponent],\r\n})\r\nexport class PureContentListComponent {\r\n\tprivate readonly ref: ElementRef;\r\n\r\n\tpublic readonly expandingMenuButtonDirection = Direction.Up;\r\n\r\n\t@HostBinding('class.in-select-mode')\r\n\t@Input({ alias: 'isInSelectMode', required: true })\r\n\tpublic isInSelectMode!: boolean;\r\n\r\n\t@Input({ required: true })\r\n\tpublic content!: Array<ContentType>;\r\n\r\n\t@Input()\r\n\tpublic displayNameableDirectoryItem: boolean = false;\r\n\r\n\t@Output()\r\n\tpublic onSelect: EventEmitter<ListItemSelectEvent> = new EventEmitter();\r\n\r\n\t@Output()\r\n\tpublic onUnselect: EventEmitter<ListItemUnselectEvent> = new EventEmitter();\r\n\r\n\t@Output()\r\n\tpublic onClickOutside: EventEmitter<void> = new EventEmitter();\r\n\r\n\t@Output()\r\n\tpublic onSelectAll: EventEmitter<void> = new EventEmitter();\r\n\r\n\t@Output()\r\n\tpublic onUnselectAll: EventEmitter<void> = new EventEmitter();\r\n\r\n\t@Output()\r\n\tpublic onOpen: EventEmitter<ListItemOpenEvent> = new EventEmitter();\r\n\r\n\t@Output()\r\n\tpublic onDelete: EventEmitter<ListItemDeleteEvent> = new EventEmitter();\r\n\r\n\t@Output()\r\n\tpublic onCreate: EventEmitter<string> = new EventEmitter();\r\n\r\n\t@Output()\r\n\tpublic onPlusClick: EventEmitter<void> = new EventEmitter();\r\n\r\n\t@Output()\r\n\tpublic onCancelCreation: EventEmitter<void> = new EventEmitter();\r\n\r\n\tconstructor(ref: ElementRef) {\r\n\t\tthis.ref = ref;\r\n\t}\r\n\r\n\t@HostListener('document:click', ['$event'])\r\n\tpublic clickOut(event: Event) {\r\n\t\tif (!this.ref.nativeElement.contains(event.target)) {\r\n\t\t\tthis.onClickOutside.emit();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic isFile(content: ContentType): content is File {\r\n\t\treturn content.type === Type.File;\r\n\t}\r\n}\r\n",
            "styleUrl": "./pure-content-list.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ref",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 86,
                "jsdoctags": [
                    {
                        "name": "ref",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"items\" [class.empty]=\"content.length === 0 && !displayNameableDirectoryItem\">\r\n\t@if (displayNameableDirectoryItem) {\r\n\t\t<nameable-directory-item (onSuccess)=\"onCreate.emit($event)\" (onDestroy)=\"onCancelCreation.emit()\"></nameable-directory-item>\r\n\t}\r\n\r\n\t@for (item of content; track item.name) {\r\n\t\t@if (isFile(item)) {\r\n\t\t\t<selectable-file-list-item\r\n\t\t\t\tclass=\"selectable-list-item\"\r\n\t\t\t\t(onSelect)=\"onSelect.emit($event)\"\r\n\t\t\t\t(onUnselect)=\"onUnselect.emit($event)\"\r\n\t\t\t\t[id]=\"item.id\"\r\n\t\t\t\t[metadata]=\"item\"\r\n\t\t\t\t[isSelectable]=\"isInSelectMode\"\r\n\t\t\t\t[isSelected]=\"item.isSelected\"\r\n\t\t\t></selectable-file-list-item>\r\n\t\t} @else {\r\n\t\t\t<selectable-directory-list-item\r\n\t\t\t\tclass=\"selectable-list-item\"\r\n\t\t\t\t(onSelect)=\"onSelect.emit($event)\"\r\n\t\t\t\t(onUnselect)=\"onUnselect.emit($event)\"\r\n\t\t\t\t(onOpen)=\"onOpen.emit($event)\"\r\n\t\t\t\t(onDelete)=\"onDelete.emit($event)\"\r\n\t\t\t\t[id]=\"item.id\"\r\n\t\t\t\t[metadata]=\"item\"\r\n\t\t\t\t[isSelectable]=\"isInSelectMode\"\r\n\t\t\t\t[isBeingProcessed]=\"item.isBeingProcessed\"\r\n\t\t\t\t[isSelected]=\"item.isSelected\"\r\n\t\t\t\t[isHighlighted]=\"item.isHighlighted\"\r\n\t\t\t></selectable-directory-list-item>\r\n\t\t}\r\n\t} @empty {\r\n\t\t@if (!displayNameableDirectoryItem) {\r\n\t\t\t<img src=\"/assets/illustrations/content-list-empty.svg\" alt=\"directory is empty\" />\r\n\t\t}\r\n\t}\r\n</div>\r\n<div class=\"action-trigger\">\r\n\t<svg class=\"arrow\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 -960 960 960\">\r\n\t\t<path\r\n\t\t\td=\"M480-361q-8 0-15-2.5t-13-8.5L268-556q-11-11-11-28t11-28q11-11 28-11t28 11l156 156 156-156q11-11 28-11t28 11q11 11 11 28t-11 28L508-372q-6 6-13 8.5t-15 2.5Z\"\r\n\t\t/>\r\n\t</svg>\r\n</div>\r\n<div class=\"actions\">\r\n\t<div (click)=\"onSelectAll.emit()\" class=\"action select-all\">\r\n\t\t<svg class=\"icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 -960 960 960\">\r\n\t\t\t<path\r\n\t\t\t\td=\"M70-438q-12-12-11.5-28T71-494q12-11 28-11.5t28 11.5l142 142 14 14 14 14q12 12 11.5 28T296-268q-12 11-28 11.5T240-268L70-438Zm424 85 340-340q12-12 28-11.5t28 12.5q11 12 11.5 28T890-636L522-268q-12 12-28 12t-28-12L296-438q-11-11-11-27.5t11-28.5q12-12 28.5-12t28.5 12l141 141Zm169-282L522-494q-11 11-27.5 11T466-494q-12-12-12-28.5t12-28.5l141-141q11-11 27.5-11t28.5 11q12 12 12 28.5T663-635Z\"\r\n\t\t\t/>\r\n\t\t</svg>\r\n\t</div>\r\n\t<div (click)=\"onUnselectAll.emit()\" class=\"action unselect-all\">\r\n\t\t<svg class=\"icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 -960 960 960\">\r\n\t\t\t<path\r\n\t\t\t\td=\"M845-116 609-352l-86 86q-12 12-28 12t-28-12L297-436q-12-12-11.5-28t11.5-28q12-12 28.5-12.5T354-493l141 141 56-56-386-386q-12-12-11.5-28t11.5-28q12-12 28.5-12.5T222-851l679 679q11 11 11 28t-11 28q-11 11-28 11t-28-11ZM241-266 71-436q-11-11-11-28t11-28q11-11 28-11t28 11l142 142 56 56-28 28q-12 12-28 12t-28-12Zm480-198-56-56 169-169q11-11 27-11.5t28 10.5q12 11 12.5 28T890-633L721-464ZM607-578l-56-56 58-58q11-11 28-11t28 11q11 11 11 28t-11 28l-58 58Z\"\r\n\t\t\t/>\r\n\t\t</svg>\r\n\t</div>\r\n\t<div class=\"action download\">\r\n\t\t<svg class=\"icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 -960 960 960\">\r\n\t\t\t<path\r\n\t\t\t\td=\"M480-337q-8 0-15-2.5t-13-8.5L308-492q-12-12-11.5-28t11.5-28q12-12 28.5-12.5T365-549l75 75v-286q0-17 11.5-28.5T480-800q17 0 28.5 11.5T520-760v286l75-75q12-12 28.5-11.5T652-548q11 12 11.5 28T652-492L508-348q-6 6-13 8.5t-15 2.5ZM240-160q-33 0-56.5-23.5T160-240v-80q0-17 11.5-28.5T200-360q17 0 28.5 11.5T240-320v80h480v-80q0-17 11.5-28.5T760-360q17 0 28.5 11.5T800-320v80q0 33-23.5 56.5T720-160H240Z\"\r\n\t\t\t/>\r\n\t\t</svg>\r\n\t</div>\r\n\t<div class=\"action delete\">\r\n\t\t<svg class=\"icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 -960 960 960\">\r\n\t\t\t<path\r\n\t\t\t\td=\"M280-120q-33 0-56.5-23.5T200-200v-520q-17 0-28.5-11.5T160-760q0-17 11.5-28.5T200-800h160q0-17 11.5-28.5T400-840h160q17 0 28.5 11.5T600-800h160q17 0 28.5 11.5T800-760q0 17-11.5 28.5T760-720v520q0 33-23.5 56.5T680-120H280Zm400-600H280v520h400v-520ZM400-280q17 0 28.5-11.5T440-320v-280q0-17-11.5-28.5T400-640q-17 0-28.5 11.5T360-600v280q0 17 11.5 28.5T400-280Zm160 0q17 0 28.5-11.5T600-320v-280q0-17-11.5-28.5T560-640q-17 0-28.5 11.5T520-600v280q0 17 11.5 28.5T560-280ZM280-720v520-520Z\"\r\n\t\t\t/>\r\n\t\t</svg>\r\n\t</div>\r\n</div>\r\n<div class=\"plus\" (click)=\"$event.stopPropagation(); onPlusClick.emit()\">\r\n\t<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 -960 960 960\">\r\n\t\t<path\r\n\t\t\td=\"M440-440H240q-17 0-28.5-11.5T200-480q0-17 11.5-28.5T240-520h200v-200q0-17 11.5-28.5T480-760q17 0 28.5 11.5T520-720v200h200q17 0 28.5 11.5T760-480q0 17-11.5 28.5T720-440H520v200q0 17-11.5 28.5T480-200q-17 0-28.5-11.5T440-240v-200Z\"\r\n\t\t/>\r\n\t</svg>\r\n</div>\r\n"
        },
        {
            "name": "PureDirectoryTreeComponent",
            "id": "component-PureDirectoryTreeComponent-07a21660e1af718234a4019e5f20a4f51565d736539c2df71d9281dc7816df583d8bea19ff8b9d69a27908251403b534d6696722c06d968108ca452566e1fac1",
            "file": "src/app/features/directory-tree/components/pure-directory-tree/pure-directory-tree.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pure-directory-tree",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./pure-directory-tree.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "root",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 14,
                    "type": "Node",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "tree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 17,
                    "type": "literal type",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCollapse",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "onExpand",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "onLoadContent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "onSelect",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "DirectoryTreeItemComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { DirectoryTreeItemComponent } from 'src/app/features/directory-tree/components/pure-directory-tree/components/directory-tree-item/directory-tree-item.component';\r\nimport { Node } from 'src/app/features/directory-tree/state/directory-tree.state';\r\n\r\n@Component({\r\n\tstandalone: true,\r\n\tselector: 'pure-directory-tree',\r\n\ttemplateUrl: './pure-directory-tree.component.html',\r\n\tstyleUrl: './pure-directory-tree.component.css',\r\n\timports: [DirectoryTreeItemComponent],\r\n})\r\nexport class PureDirectoryTreeComponent {\r\n\t@Input({ required: true })\r\n\tpublic root!: Node;\r\n\r\n\t@Input({ required: true })\r\n\tpublic tree!: {\r\n\t\t[path: string]: Array<Node>;\r\n\t};\r\n\r\n\t@Output()\r\n\tpublic onLoadContent: EventEmitter<string> = new EventEmitter();\r\n\r\n\t@Output()\r\n\tpublic onCollapse: EventEmitter<string> = new EventEmitter();\r\n\r\n\t@Output()\r\n\tpublic onExpand: EventEmitter<string> = new EventEmitter();\r\n\r\n\t@Output()\r\n\tpublic onSelect: EventEmitter<string> = new EventEmitter();\r\n}\r\n",
            "styleUrl": "./pure-directory-tree.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<directory-tree-item\r\n\t(onCollapse)=\"onCollapse.emit($event)\"\r\n\t(onExpand)=\"onExpand.emit($event)\"\r\n\t(onLoadContent)=\"onLoadContent.emit($event)\"\r\n\t(onSelect)=\"onSelect.emit($event)\"\r\n\t[node]=\"root\"\r\n\t[tree]=\"tree\"\r\n\t[isRoot]=\"true\"\r\n></directory-tree-item>\r\n"
        },
        {
            "name": "SelectableDirectoryListItemComponent",
            "id": "component-SelectableDirectoryListItemComponent-f5e624da89890fce7c99cedaf4d28871c3c6e1826b255b2e428c44808961fcbeed39c7b4f325536d060dcf8a5f811c8df6b92ee807f867c237b4595887697138",
            "file": "src/app/features/content-list/components/pure-content-list/components/selectable-directory-list-item/selectable-directory-list-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "selectable-directory-list-item",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./selectable-directory-list-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 70,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "isBeingProcessed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isHighlighted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSelectable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSelected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 73,
                    "type": "DirectoryContentDirectory",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onDelete",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "EventEmitter<ListItemDeleteEvent>"
                },
                {
                    "name": "onOpen",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "EventEmitter<ListItemOpenEvent>"
                },
                {
                    "name": "onSelect",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "EventEmitter<ListItemSelectEvent>"
                },
                {
                    "name": "onUnselect",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "EventEmitter<ListItemUnselectEvent>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onCheck",
                    "args": [
                        {
                            "name": "event",
                            "type": "CheckboxCheckEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CheckboxCheckEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDblClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "onUncheck",
                    "args": [
                        {
                            "name": "event",
                            "type": "CheckboxUncheckEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CheckboxUncheckEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "DirectoryListItemComponent",
                    "type": "component"
                },
                {
                    "name": "CheckboxComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { animate, group, query, state, style, transition, trigger } from '@angular/animations';\r\nimport { Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';\r\nimport { DirectoryContentDirectory } from 'generated';\r\nimport { CheckboxCheckEvent, CheckboxComponent, CheckboxUncheckEvent } from 'src/app/shared/components/checkbox/checkbox.component';\r\nimport { DirectoryListItemComponent } from 'src/app/shared/components/directory-list-item/directory-list-item.component';\r\n\r\nexport type ListItemSelectEvent = CheckboxCheckEvent & {\r\n\tid: number;\r\n};\r\n\r\nexport type ListItemUnselectEvent = CheckboxUncheckEvent & {\r\n\tid: number;\r\n};\r\n\r\nexport type ListItemOpenEvent = {\r\n\tid: number;\r\n};\r\n\r\nexport type ListItemDeleteEvent = {\r\n\tid: number;\r\n};\r\n\r\n@Component({\r\n\tstandalone: true,\r\n\tselector: 'selectable-directory-list-item',\r\n\ttemplateUrl: './selectable-directory-list-item.component.html',\r\n\tstyleUrl: './selectable-directory-list-item.component.css',\r\n\timports: [DirectoryListItemComponent, CheckboxComponent],\r\n\tanimations: [\r\n\t\ttrigger('isSelectable', [\r\n\t\t\tstate('true', style({})),\r\n\t\t\tstate('false', style({})),\r\n\t\t\ttransition('false => true', [\r\n\t\t\t\tquery('checkbox', [\r\n\t\t\t\t\tstyle({\r\n\t\t\t\t\t\tmarginLeft: '-2rem',\r\n\t\t\t\t\t\topacity: 0,\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tgroup([animate('0.25s ease-out', style({ opacity: 1 })), animate('0.3s ease', style({ marginLeft: 0 }))]),\r\n\t\t\t\t]),\r\n\t\t\t]),\r\n\t\t\ttransition('true => false', [\r\n\t\t\t\tquery('checkbox', [\r\n\t\t\t\t\tstyle({\r\n\t\t\t\t\t\tmarginLeft: 0,\r\n\t\t\t\t\t\topacity: 1,\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tgroup([animate('0.25s 0.05s ease', style({ opacity: 0 })), animate('0.3s ease', style({ marginLeft: '-2rem' }))]),\r\n\t\t\t\t]),\r\n\t\t\t]),\r\n\t\t]),\r\n\t],\r\n})\r\nexport class SelectableDirectoryListItemComponent {\r\n\t@HostBinding('class.selected')\r\n\t@Input('isSelected')\r\n\tpublic isSelected: boolean = false;\r\n\r\n\t@HostBinding('class.selectable')\r\n\t@Input('isSelectable')\r\n\tpublic isSelectable: boolean = false;\r\n\r\n\t@Input()\r\n\tpublic isHighlighted: boolean = false;\r\n\r\n\t@Input()\r\n\tpublic isBeingProcessed: boolean = false;\r\n\r\n\t@Input({ required: true })\r\n\tpublic id!: number;\r\n\r\n\t@Input({ required: true })\r\n\tpublic metadata!: DirectoryContentDirectory;\r\n\r\n\t@Output()\r\n\tpublic onSelect: EventEmitter<ListItemSelectEvent> = new EventEmitter();\r\n\r\n\t@Output()\r\n\tpublic onUnselect: EventEmitter<ListItemUnselectEvent> = new EventEmitter();\r\n\r\n\t@Output()\r\n\tpublic onOpen: EventEmitter<ListItemOpenEvent> = new EventEmitter();\r\n\r\n\t@Output()\r\n\tpublic onDelete: EventEmitter<ListItemDeleteEvent> = new EventEmitter();\r\n\r\n\tpublic onCheck(event: CheckboxCheckEvent) {\r\n\t\tthis.onSelect.emit({ id: this.id, ...event });\r\n\t}\r\n\r\n\tpublic onUncheck(event: CheckboxUncheckEvent) {\r\n\t\tthis.onUnselect.emit({ id: this.id, ...event });\r\n\t}\r\n\r\n\tpublic onDblClick() {\r\n\t\tthis.onOpen.emit({ id: this.id });\r\n\t}\r\n\r\n\tpublic onClick(event: MouseEvent) {\r\n\t\tif (event.detail > 1) {\r\n\t\t\tevent.preventDefault();\r\n\t\t}\r\n\t}\r\n}\r\n",
            "styleUrl": "./selectable-directory-list-item.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<label (click)=\"onClick($event)\" (dblclick)=\"onDblClick()\" [@isSelectable]=\"this.isSelectable\">\r\n\t<checkbox [isSelected]=\"this.isSelected\" (onCheck)=\"this.onCheck($event)\" (onUncheck)=\"this.onUncheck($event)\"></checkbox>\r\n\t<directory-list-item\r\n\t\t[isBeingProcessed]=\"this.isBeingProcessed\"\r\n\t\t[isSelected]=\"this.isSelected\"\r\n\t\t[isHighlighted]=\"this.isHighlighted\"\r\n\t\t[metadata]=\"this.metadata\"\r\n\t\t(onDelete)=\"onDelete.emit({ id: id })\"\r\n\t></directory-list-item>\r\n</label>\r\n"
        },
        {
            "name": "SelectableFileListItemComponent",
            "id": "component-SelectableFileListItemComponent-ea8c1fa2c97eb264fbe02358f4f6ed8fad4fff6b4c837f87a241265822bc1b72a4227f6f13e22cdabe3f520af558d213a4ba9875fe4d9b433b3e7e79400e2631",
            "file": "src/app/features/content-list/components/pure-content-list/components/selectable-file-list-item/selectable-file-list-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "selectable-file-list-item",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./selectable-file-list-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 52,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "isSelectable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSelected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 55,
                    "type": "DirectoryContentFile",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onSelect",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "EventEmitter<ListItemSelectEvent>"
                },
                {
                    "name": "onUnselect",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "EventEmitter<ListItemUnselectEvent>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onCheck",
                    "args": [
                        {
                            "name": "event",
                            "type": "CheckboxCheckEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CheckboxCheckEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onUncheck",
                    "args": [
                        {
                            "name": "event",
                            "type": "CheckboxUncheckEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CheckboxUncheckEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FileListItemComponent",
                    "type": "component"
                },
                {
                    "name": "CheckboxComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { animate, group, query, state, style, transition, trigger } from '@angular/animations';\r\nimport { Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';\r\nimport { DirectoryContentFile } from 'generated';\r\nimport {\r\n\tListItemSelectEvent,\r\n\tListItemUnselectEvent,\r\n} from 'src/app/features/content-list/components/pure-content-list/components/selectable-directory-list-item/selectable-directory-list-item.component';\r\nimport { CheckboxCheckEvent, CheckboxComponent, CheckboxUncheckEvent } from 'src/app/shared/components/checkbox/checkbox.component';\r\nimport { FileListItemComponent } from 'src/app/shared/components/file-list-item/file-list-item.component';\r\n\r\n@Component({\r\n\tstandalone: true,\r\n\tselector: 'selectable-file-list-item',\r\n\ttemplateUrl: './selectable-file-list-item.component.html',\r\n\tstyleUrl: './selectable-file-list-item.component.css',\r\n\timports: [FileListItemComponent, CheckboxComponent],\r\n\tanimations: [\r\n\t\ttrigger('isSelectable', [\r\n\t\t\tstate('true', style({})),\r\n\t\t\tstate('false', style({})),\r\n\t\t\ttransition('false => true', [\r\n\t\t\t\tquery('checkbox', [\r\n\t\t\t\t\tstyle({\r\n\t\t\t\t\t\tmarginLeft: '-2rem',\r\n\t\t\t\t\t\topacity: 0,\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tgroup([animate('0.25s ease-out', style({ opacity: 1 })), animate('0.3s ease', style({ marginLeft: 0 }))]),\r\n\t\t\t\t]),\r\n\t\t\t]),\r\n\t\t\ttransition('true => false', [\r\n\t\t\t\tquery('checkbox', [\r\n\t\t\t\t\tstyle({\r\n\t\t\t\t\t\tmarginLeft: 0,\r\n\t\t\t\t\t\topacity: 1,\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tgroup([animate('0.25s 0.05s ease', style({ opacity: 0 })), animate('0.3s ease', style({ marginLeft: '-2rem' }))]),\r\n\t\t\t\t]),\r\n\t\t\t]),\r\n\t\t]),\r\n\t],\r\n})\r\nexport class SelectableFileListItemComponent {\r\n\t@HostBinding('class.selected')\r\n\t@Input('isSelected')\r\n\tpublic isSelected: boolean = false;\r\n\r\n\t@HostBinding('class.selectable')\r\n\t@Input('isSelectable')\r\n\tpublic isSelectable: boolean = false;\r\n\r\n\t@Input({ required: true })\r\n\tpublic id!: number;\r\n\r\n\t@Input({ required: true })\r\n\tpublic metadata!: DirectoryContentFile;\r\n\r\n\t@Output()\r\n\tpublic onSelect: EventEmitter<ListItemSelectEvent> = new EventEmitter();\r\n\r\n\t@Output()\r\n\tpublic onUnselect: EventEmitter<ListItemUnselectEvent> = new EventEmitter();\r\n\r\n\tpublic onCheck(event: CheckboxCheckEvent) {\r\n\t\tthis.onSelect.emit({ id: this.id, ...event });\r\n\t}\r\n\r\n\tpublic onUncheck(event: CheckboxUncheckEvent) {\r\n\t\tthis.onUnselect.emit({ id: this.id, ...event });\r\n\t}\r\n}\r\n",
            "styleUrl": "./selectable-file-list-item.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<label [@isSelectable]=\"this.isSelectable\">\r\n\t<checkbox [isSelected]=\"this.isSelected\" (onCheck)=\"this.onCheck($event)\" (onUncheck)=\"this.onUncheck($event)\"></checkbox>\r\n\t<file-list-item [isSelected]=\"this.isSelected\" [metadata]=\"this.metadata\"></file-list-item>\r\n</label>\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n\tproviders: [\r\n\t\tprovideAnimationsAsync(),\r\n\t\tprovideRouter(routes),\r\n\t\tprovideHttpClient(),\r\n\t\timportProvidersFrom(NgxsModule.forRoot([ContentListState, DirectoryTreeState]), NgxsLoggerPluginModule.forRoot(), NgxsRouterPluginModule.forRoot()),\r\n\t],\r\n}"
            },
            {
                "name": "DirectoryTreeStateToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/directory-tree/state/directory-tree.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'directory_tree'"
            },
            {
                "name": "ThicknessMap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/loading-spinner/loading-spinner.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<Thickness, number>",
                "defaultValue": "{\r\n\t[Thickness.UltraThick]: 0.24,\r\n\t[Thickness.Thick]: 0.18,\r\n\t[Thickness.Regular]: 0.09,\r\n\t[Thickness.Thin]: 0.045,\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "CheckboxCheckEvent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/components/checkbox/checkbox.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "CheckboxUncheckEvent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/components/checkbox/checkbox.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "ContentType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "File | Directory",
                "file": "src/app/features/content-list/components/pure-content-list/pure-content-list.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Directory",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/features/content-list/components/pure-content-list/pure-content-list.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "File",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/features/content-list/components/pure-content-list/pure-content-list.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "ListItemDeleteEvent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/features/content-list/components/pure-content-list/components/selectable-directory-list-item/selectable-directory-list-item.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "ListItemOpenEvent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/features/content-list/components/pure-content-list/components/selectable-directory-list-item/selectable-directory-list-item.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "ListItemSelectEvent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/features/content-list/components/pure-content-list/components/selectable-directory-list-item/selectable-directory-list-item.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "ListItemUnselectEvent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/features/content-list/components/pure-content-list/components/selectable-directory-list-item/selectable-directory-list-item.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "SelectEvent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/models/SelectedEvent.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            }
        ],
        "enumerations": [
            {
                "name": "Direction",
                "childs": [
                    {
                        "name": "Up",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "up"
                    },
                    {
                        "name": "Down",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "down"
                    },
                    {
                        "name": "Left",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "left"
                    },
                    {
                        "name": "Right",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "right"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/components/expanding-menu-button/expanding-menu-button.component.ts"
            },
            {
                "name": "Thickness",
                "childs": [
                    {
                        "name": "UltraThick",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ultra-thick"
                    },
                    {
                        "name": "Thick",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "thick"
                    },
                    {
                        "name": "Regular",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "regular"
                    },
                    {
                        "name": "Thin",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "thin"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/components/loading-spinner/loading-spinner.component.ts"
            },
            {
                "name": "Type",
                "childs": [
                    {
                        "name": "Minimalistic",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "minimalistic"
                    },
                    {
                        "name": "Rounded",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "rounded"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/components/loading-spinner/loading-spinner.component.ts"
            },
            {
                "name": "Type",
                "childs": [
                    {
                        "name": "Directory",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "File",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/features/content-list/components/pure-content-list/pure-content-list.component.ts"
            }
        ],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n\tproviders: [\r\n\t\tprovideAnimationsAsync(),\r\n\t\tprovideRouter(routes),\r\n\t\tprovideHttpClient(),\r\n\t\timportProvidersFrom(NgxsModule.forRoot([ContentListState, DirectoryTreeState]), NgxsLoggerPluginModule.forRoot(), NgxsRouterPluginModule.forRoot()),\r\n\t],\r\n}"
                }
            ],
            "src/app/features/directory-tree/state/directory-tree.state.ts": [
                {
                    "name": "DirectoryTreeStateToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/directory-tree/state/directory-tree.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'directory_tree'"
                }
            ],
            "src/app/shared/components/loading-spinner/loading-spinner.component.ts": [
                {
                    "name": "ThicknessMap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/loading-spinner/loading-spinner.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<Thickness, number>",
                    "defaultValue": "{\r\n\t[Thickness.UltraThick]: 0.24,\r\n\t[Thickness.Thick]: 0.18,\r\n\t[Thickness.Regular]: 0.09,\r\n\t[Thickness.Thin]: 0.045,\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/shared/components/expanding-menu-button/expanding-menu-button.component.ts": [
                {
                    "name": "Direction",
                    "childs": [
                        {
                            "name": "Up",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "up"
                        },
                        {
                            "name": "Down",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "down"
                        },
                        {
                            "name": "Left",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "left"
                        },
                        {
                            "name": "Right",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "right"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/components/expanding-menu-button/expanding-menu-button.component.ts"
                }
            ],
            "src/app/shared/components/loading-spinner/loading-spinner.component.ts": [
                {
                    "name": "Thickness",
                    "childs": [
                        {
                            "name": "UltraThick",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ultra-thick"
                        },
                        {
                            "name": "Thick",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "thick"
                        },
                        {
                            "name": "Regular",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "regular"
                        },
                        {
                            "name": "Thin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "thin"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/components/loading-spinner/loading-spinner.component.ts"
                },
                {
                    "name": "Type",
                    "childs": [
                        {
                            "name": "Minimalistic",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "minimalistic"
                        },
                        {
                            "name": "Rounded",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "rounded"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/components/loading-spinner/loading-spinner.component.ts"
                }
            ],
            "src/app/features/content-list/components/pure-content-list/pure-content-list.component.ts": [
                {
                    "name": "Type",
                    "childs": [
                        {
                            "name": "Directory",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/features/content-list/components/pure-content-list/pure-content-list.component.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/shared/components/checkbox/checkbox.component.ts": [
                {
                    "name": "CheckboxCheckEvent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/components/checkbox/checkbox.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "CheckboxUncheckEvent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/components/checkbox/checkbox.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/features/content-list/components/pure-content-list/pure-content-list.component.ts": [
                {
                    "name": "ContentType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "File | Directory",
                    "file": "src/app/features/content-list/components/pure-content-list/pure-content-list.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "Directory",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/features/content-list/components/pure-content-list/pure-content-list.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                },
                {
                    "name": "File",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/features/content-list/components/pure-content-list/pure-content-list.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                }
            ],
            "src/app/features/content-list/components/pure-content-list/components/selectable-directory-list-item/selectable-directory-list-item.component.ts": [
                {
                    "name": "ListItemDeleteEvent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/features/content-list/components/pure-content-list/components/selectable-directory-list-item/selectable-directory-list-item.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "ListItemOpenEvent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/features/content-list/components/pure-content-list/components/selectable-directory-list-item/selectable-directory-list-item.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "ListItemSelectEvent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/features/content-list/components/pure-content-list/components/selectable-directory-list-item/selectable-directory-list-item.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                },
                {
                    "name": "ListItemUnselectEvent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/features/content-list/components/pure-content-list/components/selectable-directory-list-item/selectable-directory-list-item.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                }
            ],
            "src/app/shared/models/SelectedEvent.ts": [
                {
                    "name": "SelectEvent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/models/SelectedEvent.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/explorer/explorer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExplorerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/breadcrumbs/breadcrumbs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/breadcrumbs/components/pure-breadcrumbs/pure-breadcrumbs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PureBreadcrumbsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/content-list/components/pure-content-list/components/selectable-directory-list-item/selectable-directory-list-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectableDirectoryListItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/features/content-list/components/pure-content-list/components/selectable-file-list-item/selectable-file-list-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectableFileListItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/features/content-list/components/pure-content-list/pure-content-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PureContentListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/features/content-list/content-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContentListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/features/content-list/content-list.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ContentListService",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/features/content-list/state/content-list.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CancelCreation",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/features/content-list/state/content-list.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateDirectory",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/content-list/state/content-list.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CtrlSelect",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/content-list/state/content-list.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CtrlUnselect",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/content-list/state/content-list.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Delete",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/content-list/state/content-list.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteSelected",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/content-list/state/content-list.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DisplayDirectoryCreationWidget",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/features/content-list/state/content-list.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FetchContent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/content-list/state/content-list.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Open",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/content-list/state/content-list.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SelectAll",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/features/content-list/state/content-list.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SelectSingle",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/content-list/state/content-list.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ShiftSelect",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/content-list/state/content-list.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ShiftUnselect",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/content-list/state/content-list.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UnselectAll",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/features/content-list/state/content-list.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UnselectSingle",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/content-list/state/content-list.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ContentListState",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/features/content-list/state/content-list.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ContentListStateModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/directory-tree/components/pure-directory-tree/components/directory-tree-item/directory-tree-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DirectoryTreeItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/features/directory-tree/components/pure-directory-tree/pure-directory-tree.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PureDirectoryTreeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/directory-tree/directory-tree.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DirectoryTreeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/features/directory-tree/state/directory-tree.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Collapse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/directory-tree/state/directory-tree.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Expand",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/directory-tree/state/directory-tree.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FetchContent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/directory-tree/state/directory-tree.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Open",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/directory-tree/state/directory-tree.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Remove",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/directory-tree/state/directory-tree.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Select",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/directory-tree/state/directory-tree.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Unselect",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/directory-tree/state/directory-tree.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DirectoryTreeState",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/features/directory-tree/state/directory-tree.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DirectoryTreeStateModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/directory-tree/state/directory-tree.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Node",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/directory-tree/state/directory-tree.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TreeModel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/directory-tree/state/directory-tree.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DirectoryTreeStateToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/directory-list-item/directory-list-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DirectoryListItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/expanding-menu-button/expanding-menu-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExpandingMenuButtonComponent",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/shared/components/file-list-item/file-list-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FileListItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/loading-spinner/loading-spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingSpinnerComponent",
                "coveragePercent": 42,
                "coverageCount": "6/14",
                "status": "medium"
            },
            {
                "filePath": "src/app/shared/components/loading-spinner/loading-spinner.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ThicknessMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/nameable-directory-item/nameable-directory-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NameableDirectoryItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/IDeletable.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDeletable",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/IDownloadable.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDownloadable",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/IRenamable.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRenamable",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/ISelectable.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISelectable",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/PathUtils.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PathUtils",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}