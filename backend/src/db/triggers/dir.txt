CREATE DEFINER=`root`@`localhost` TRIGGER `directories_AFTER_INSERT` AFTER INSERT ON `directories` FOR EACH ROW BEGIN
	# create first flat entry (self, self, 0) 
	INSERT INTO tree (parent, child, depth)
		SELECT NEW.uuid, NEW.uuid, 0;
    
    # create hierarchical entries
    # depends on flat entries - must be a seperate insert
    INSERT INTO tree (parent, child, depth) 
    	SELECT p.parent, c.child, p.depth + c.depth + 1
    		FROM tree p JOIN tree c
    		WHERE p.child = NEW.parent AND c.parent = NEW.uuid;
END

CREATE DEFINER=`root`@`localhost` TRIGGER `directories_AFTER_UPDATE` AFTER UPDATE ON `directories` FOR EACH ROW BEGIN
	IF OLD.uuid != NEW.uuid THEN
		UPDATE tree 
		SET parent = NEW.uuid 
			WHERE parent = OLD.uuid; 

        UPDATE tree 
		SET child = NEW.uuid 
			WHERE child = OLD.uuid; 
    END IF;
    
    IF OLD.parent != NEW.parent THEN
		# remove all paths to subtree but not paths inside the subtree
		DELETE FROM tree 
		WHERE tree.child IN 
				(SELECT child FROM (SELECT * FROM tree) AS a WHERE a.parent = NEW.uuid)
            AND tree.parent NOT IN
				(SELECT child FROM (SELECT * FROM tree) AS b WHERE b.parent = NEW.uuid);
                
		INSERT INTO tree (parent, child, depth)
			SELECT supertree.parent, subtree.child, supertree.depth + subtree.depth + 1
				FROM tree AS supertree JOIN tree AS subtree
				WHERE subtree.parent = NEW.uuid AND supertree.child = NEW.parent;
    END IF;
END

CREATE DEFINER=`root`@`localhost` TRIGGER `directories_AFTER_DELETE` AFTER DELETE ON `directories` FOR EACH ROW BEGIN
	DELETE FROM tree
    WHERE tree.child IN 
		(SELECT child FROM (SELECT * FROM tree) AS a WHERE a.parent = OLD.uuid);
END


#### RECURSIVE GET PATH
WITH RECURSIVE prev_ (iteration, uuid, name, parent) as (
	SELECT 0, uuid, name, parent
    FROM directories
    WHERE uuid = "13"
	UNION ALL
    SELECT prev_.iteration + 1, next_.uuid, next_.name, next_.parent
    FROM directories AS next_
    INNER JOIN prev_
    ON next_.uuid = prev_.parent
)
SELECT GROUP_CONCAT(name ORDER BY iteration DESC SEPARATOR "/") FROM prev_

### RECURSIVE GET uuid
WITH RECURSIVE prev (nextPath, uuid, iteration) AS (
	SELECT "/", CAST(NULL AS VARCHAR(255)), 0
	
	UNION ALL
	
	SELECT GET_PATH_AFTER_UPMOST_DIRNAME(prev.nextPath), next.uuid, prev.iteration + 1
	FROM directories AS next
	INNER JOIN prev WHERE 
		(next.parent IS NULL AND prev.uuid IS NULL AND next.name = GET_UPMOST_DIRNAME(prev.nextPath)) OR
		(next.parent = prev.uuid AND next.name = GET_UPMOST_DIRNAME(prev.nextPath)) OR 
		(GET_UPMOST_DIRNAME(prev.nextPath) = "" AND next.name = prev.nextPath AND next.parent = prev.uuid)
)
SELECT uuid FROM prev;