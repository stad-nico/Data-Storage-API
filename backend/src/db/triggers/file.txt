CREATE DEFINER=`root`@`localhost` TRIGGER `files_AFTER_INSERT` AFTER INSERT ON `files` FOR EACH ROW BEGIN
	INSERT INTO tree (parent,child,depth)
    SELECT parent, NEW.uuid, depth + 1
      FROM tree 
      WHERE child = NEW.parent;
END

CREATE DEFINER=`root`@`localhost` TRIGGER `files_AFTER_UPDATE` AFTER UPDATE ON `files` FOR EACH ROW BEGIN
	IF OLD.uuid != NEW.uuid THEN
		UPDATE tree SET child = NEW.uuid WHERE child = OLD.uuid;
    END IF;
    
    IF OLD.parent != NEW.parent THEN
		UPDATE tree SET parent = NEW.parent WHERE child = OLD.uuid AND parent = OLD.parent;
    END IF;
END

CREATE DEFINER=`root`@`localhost` TRIGGER `files_AFTER_DELETE` AFTER DELETE ON `files` FOR EACH ROW BEGIN
	DELETE FROM tree
    WHERE child = OLD.uuid;
END

### RECURSIVE
WITH uuids AS (
	WITH RECURSIVE prev_ (nextPath, uuid) AS (
		SELECT GET_PATH_AFTER_UPMOST_DIRNAME("A/C/D/F/file.txt"), 
               uuid
		FROM directories
		WHERE name = GET_UPMOST_DIRNAME("A/C/D/F/file.txt")
          AND parent IS NULL
		UNION ALL
		SELECT GET_PATH_AFTER_UPMOST_DIRNAME(prev_.nextPath),
               next_.uuid
		FROM directories AS next_ 
		INNER JOIN prev_ ON next_.name = GET_UPMOST_DIRNAME(prev_.nextPath)
          AND next_.parent = prev_.uuid
	)
	SELECT files.uuid 
	FROM files 
	INNER JOIN prev_ ON parent = prev_.uuid 
	  AND name = prev_.nextPath
)
SELECT * 
FROM files 
INNER JOIN uuids USING(uuid);